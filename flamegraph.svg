<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1317.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1317.00"> </text><svg id="frames" x="10" width="1180" total_samples="276716"><g><title>[libclntsh.so.19.1] (41 samples, 0.01%)</title><rect x="0.0007%" y="1237" width="0.0148%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="41"/><text x="0.2507%" y="1247.50"></text></g><g><title>snttread (41 samples, 0.01%)</title><rect x="0.0007%" y="1221" width="0.0148%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="41"/><text x="0.2507%" y="1231.50"></text></g><g><title>__libc_read (41 samples, 0.01%)</title><rect x="0.0007%" y="1205" width="0.0148%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="41"/><text x="0.2507%" y="1215.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="0.0007%" y="1189" width="0.0148%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="41"/><text x="0.2507%" y="1199.50"></text></g><g><title>[libclntsh.so.19.1] (44 samples, 0.02%)</title><rect x="0.0007%" y="1253" width="0.0159%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="44"/><text x="0.2507%" y="1263.50"></text></g><g><title>dpiVar_copyData (53 samples, 0.02%)</title><rect x="0.0242%" y="1205" width="0.0192%" height="15" fill="rgb(232,128,0)" fg:x="67" fg:w="53"/><text x="0.2742%" y="1215.50"></text></g><g><title>dpiVar__setFromBytes (39 samples, 0.01%)</title><rect x="0.0293%" y="1189" width="0.0141%" height="15" fill="rgb(207,160,47)" fg:x="81" fg:w="39"/><text x="0.2793%" y="1199.50"></text></g><g><title>memcpy (37 samples, 0.01%)</title><rect x="0.0300%" y="1173" width="0.0134%" height="15" fill="rgb(228,23,34)" fg:x="83" fg:w="37"/><text x="0.2800%" y="1183.50"></text></g><g><title>__memcpy_ssse3 (37 samples, 0.01%)</title><rect x="0.0300%" y="1157" width="0.0134%" height="15" fill="rgb(218,30,26)" fg:x="83" fg:w="37"/><text x="0.2800%" y="1167.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="0.0300%" y="1141" width="0.0134%" height="15" fill="rgb(220,122,19)" fg:x="83" fg:w="37"/><text x="0.2800%" y="1151.50"></text></g><g><title>dpiConn_newVar (81 samples, 0.03%)</title><rect x="0.0452%" y="1189" width="0.0293%" height="15" fill="rgb(250,228,42)" fg:x="125" fg:w="81"/><text x="0.2952%" y="1199.50"></text></g><g><title>dpiVar__allocate (69 samples, 0.02%)</title><rect x="0.0495%" y="1173" width="0.0249%" height="15" fill="rgb(240,193,28)" fg:x="137" fg:w="69"/><text x="0.2995%" y="1183.50"></text></g><g><title>dpiVar__initBuffer (56 samples, 0.02%)</title><rect x="0.0542%" y="1157" width="0.0202%" height="15" fill="rgb(216,20,37)" fg:x="150" fg:w="56"/><text x="0.3042%" y="1167.50"></text></g><g><title>dpiUtils__allocateMemory (34 samples, 0.01%)</title><rect x="0.0622%" y="1141" width="0.0123%" height="15" fill="rgb(206,188,39)" fg:x="172" fg:w="34"/><text x="0.3122%" y="1151.50"></text></g><g><title>__calloc (28 samples, 0.01%)</title><rect x="0.0643%" y="1125" width="0.0101%" height="15" fill="rgb(217,207,13)" fg:x="178" fg:w="28"/><text x="0.3143%" y="1135.50"></text></g><g><title>[unknown] (155 samples, 0.06%)</title><rect x="0.0188%" y="1237" width="0.0560%" height="15" fill="rgb(231,73,38)" fg:x="52" fg:w="155"/><text x="0.2688%" y="1247.50"></text></g><g><title>oracle::sql_value::SqlValue::dup_by_handle (145 samples, 0.05%)</title><rect x="0.0224%" y="1221" width="0.0524%" height="15" fill="rgb(225,20,46)" fg:x="62" fg:w="145"/><text x="0.2724%" y="1231.50"></text></g><g><title>oracle::sql_value::SqlValue::init_handle (87 samples, 0.03%)</title><rect x="0.0434%" y="1205" width="0.0314%" height="15" fill="rgb(210,31,41)" fg:x="120" fg:w="87"/><text x="0.2934%" y="1215.50"></text></g><g><title>_int_free (60 samples, 0.02%)</title><rect x="0.0849%" y="1237" width="0.0217%" height="15" fill="rgb(221,200,47)" fg:x="235" fg:w="60"/><text x="0.3349%" y="1247.50"></text></g><g><title>[unknown] (60 samples, 0.02%)</title><rect x="0.0849%" y="1221" width="0.0217%" height="15" fill="rgb(226,26,5)" fg:x="235" fg:w="60"/><text x="0.3349%" y="1231.50"></text></g><g><title>dpiUtils__allocateMemory (75 samples, 0.03%)</title><rect x="0.1164%" y="1237" width="0.0271%" height="15" fill="rgb(249,33,26)" fg:x="322" fg:w="75"/><text x="0.3664%" y="1247.50"></text></g><g><title>__GI___libc_malloc (75 samples, 0.03%)</title><rect x="0.1164%" y="1221" width="0.0271%" height="15" fill="rgb(235,183,28)" fg:x="322" fg:w="75"/><text x="0.3664%" y="1231.50"></text></g><g><title>[unknown] (75 samples, 0.03%)</title><rect x="0.1164%" y="1205" width="0.0271%" height="15" fill="rgb(221,5,38)" fg:x="322" fg:w="75"/><text x="0.3664%" y="1215.50"></text></g><g><title>malloc_consolidate (87 samples, 0.03%)</title><rect x="0.1442%" y="1237" width="0.0314%" height="15" fill="rgb(247,18,42)" fg:x="399" fg:w="87"/><text x="0.3942%" y="1247.50"></text></g><g><title>[unknown] (87 samples, 0.03%)</title><rect x="0.1442%" y="1221" width="0.0314%" height="15" fill="rgb(241,131,45)" fg:x="399" fg:w="87"/><text x="0.3942%" y="1231.50"></text></g><g><title>[unknown] (446 samples, 0.16%)</title><rect x="0.0184%" y="1253" width="0.1612%" height="15" fill="rgb(249,31,29)" fg:x="51" fg:w="446"/><text x="0.2684%" y="1263.50"></text></g><g><title>__GI___libc_free (1,254 samples, 0.45%)</title><rect x="0.2707%" y="357" width="0.4532%" height="15" fill="rgb(225,111,53)" fg:x="749" fg:w="1254"/><text x="0.5207%" y="367.50"></text></g><g><title>_int_free (802 samples, 0.29%)</title><rect x="0.4340%" y="341" width="0.2898%" height="15" fill="rgb(238,160,17)" fg:x="1201" fg:w="802"/><text x="0.6840%" y="351.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.02%)</title><rect x="0.7238%" y="357" width="0.0152%" height="15" fill="rgb(214,148,48)" fg:x="2003" fg:w="42"/><text x="0.9738%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.02%)</title><rect x="0.7238%" y="341" width="0.0152%" height="15" fill="rgb(232,36,49)" fg:x="2003" fg:w="42"/><text x="0.9738%" y="351.50"></text></g><g><title>__rust_dealloc (34 samples, 0.01%)</title><rect x="0.7390%" y="357" width="0.0123%" height="15" fill="rgb(209,103,24)" fg:x="2045" fg:w="34"/><text x="0.9890%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,582 samples, 0.57%)</title><rect x="0.1800%" y="373" width="0.5717%" height="15" fill="rgb(229,88,8)" fg:x="498" fg:w="1582"/><text x="0.4300%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.01%)</title><rect x="0.9345%" y="357" width="0.0126%" height="15" fill="rgb(213,181,19)" fg:x="2586" fg:w="35"/><text x="1.1845%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (40 samples, 0.01%)</title><rect x="1.0552%" y="245" width="0.0145%" height="15" fill="rgb(254,191,54)" fg:x="2920" fg:w="40"/><text x="1.3052%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (40 samples, 0.01%)</title><rect x="1.0552%" y="229" width="0.0145%" height="15" fill="rgb(241,83,37)" fg:x="2920" fg:w="40"/><text x="1.3052%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (606 samples, 0.22%)</title><rect x="1.0697%" y="245" width="0.2190%" height="15" fill="rgb(233,36,39)" fg:x="2960" fg:w="606"/><text x="1.3197%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (743 samples, 0.27%)</title><rect x="1.2898%" y="245" width="0.2685%" height="15" fill="rgb(226,3,54)" fg:x="3569" fg:w="743"/><text x="1.5398%" y="255.50"></text></g><g><title>core::ptr::write (670 samples, 0.24%)</title><rect x="1.3162%" y="229" width="0.2421%" height="15" fill="rgb(245,192,40)" fg:x="3642" fg:w="670"/><text x="1.5662%" y="239.50"></text></g><g><title>__GI___libc_malloc (681 samples, 0.25%)</title><rect x="1.5594%" y="133" width="0.2461%" height="15" fill="rgb(238,167,29)" fg:x="4315" fg:w="681"/><text x="1.8094%" y="143.50"></text></g><g><title>_int_malloc (529 samples, 0.19%)</title><rect x="1.6143%" y="117" width="0.1912%" height="15" fill="rgb(232,182,51)" fg:x="4467" fg:w="529"/><text x="1.8643%" y="127.50"></text></g><g><title>__rdl_alloc (39 samples, 0.01%)</title><rect x="1.8055%" y="133" width="0.0141%" height="15" fill="rgb(231,60,39)" fg:x="4996" fg:w="39"/><text x="2.0555%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (726 samples, 0.26%)</title><rect x="1.5586%" y="181" width="0.2624%" height="15" fill="rgb(208,69,12)" fg:x="4313" fg:w="726"/><text x="1.8086%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (726 samples, 0.26%)</title><rect x="1.5586%" y="165" width="0.2624%" height="15" fill="rgb(235,93,37)" fg:x="4313" fg:w="726"/><text x="1.8086%" y="175.50"></text></g><g><title>alloc::alloc::alloc (724 samples, 0.26%)</title><rect x="1.5594%" y="149" width="0.2616%" height="15" fill="rgb(213,116,39)" fg:x="4315" fg:w="724"/><text x="1.8094%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (729 samples, 0.26%)</title><rect x="1.5583%" y="245" width="0.2634%" height="15" fill="rgb(222,207,29)" fg:x="4312" fg:w="729"/><text x="1.8083%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (729 samples, 0.26%)</title><rect x="1.5583%" y="229" width="0.2634%" height="15" fill="rgb(206,96,30)" fg:x="4312" fg:w="729"/><text x="1.8083%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (728 samples, 0.26%)</title><rect x="1.5586%" y="213" width="0.2631%" height="15" fill="rgb(218,138,4)" fg:x="4313" fg:w="728"/><text x="1.8086%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (728 samples, 0.26%)</title><rect x="1.5586%" y="197" width="0.2631%" height="15" fill="rgb(250,191,14)" fg:x="4313" fg:w="728"/><text x="1.8086%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (3,766 samples, 1.36%)</title><rect x="2.2030%" y="229" width="1.3610%" height="15" fill="rgb(239,60,40)" fg:x="6096" fg:w="3766"/><text x="2.4530%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (48 samples, 0.02%)</title><rect x="3.5466%" y="213" width="0.0173%" height="15" fill="rgb(206,27,48)" fg:x="9814" fg:w="48"/><text x="3.7966%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (48 samples, 0.02%)</title><rect x="3.5466%" y="197" width="0.0173%" height="15" fill="rgb(225,35,8)" fg:x="9814" fg:w="48"/><text x="3.7966%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (97 samples, 0.04%)</title><rect x="3.5639%" y="229" width="0.0351%" height="15" fill="rgb(250,213,24)" fg:x="9862" fg:w="97"/><text x="3.8139%" y="239.50"></text></g><g><title>&lt;oracle::statement::QueryParams as core::clone::Clone&gt;::clone (304 samples, 0.11%)</title><rect x="3.5990%" y="229" width="0.1099%" height="15" fill="rgb(247,123,22)" fg:x="9959" fg:w="304"/><text x="3.8490%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (67 samples, 0.02%)</title><rect x="3.6846%" y="213" width="0.0242%" height="15" fill="rgb(231,138,38)" fg:x="10196" fg:w="67"/><text x="3.9346%" y="223.50"></text></g><g><title>dpiGen__checkHandle (1,306 samples, 0.47%)</title><rect x="4.1244%" y="213" width="0.4720%" height="15" fill="rgb(231,145,46)" fg:x="11413" fg:w="1306"/><text x="4.3744%" y="223.50"></text></g><g><title>dpiGen__endPublicFn (218 samples, 0.08%)</title><rect x="4.5964%" y="213" width="0.0788%" height="15" fill="rgb(251,118,11)" fg:x="12719" fg:w="218"/><text x="4.8464%" y="223.50"></text></g><g><title>dpiGen__checkHandle (290 samples, 0.10%)</title><rect x="4.9347%" y="181" width="0.1048%" height="15" fill="rgb(217,147,25)" fg:x="13655" fg:w="290"/><text x="5.1847%" y="191.50"></text></g><g><title>OCIThreadKeyGet (142 samples, 0.05%)</title><rect x="6.0398%" y="133" width="0.0513%" height="15" fill="rgb(247,81,37)" fg:x="16713" fg:w="142"/><text x="6.2898%" y="143.50"></text></g><g><title>dpiOci__threadKeyGet (30 samples, 0.01%)</title><rect x="6.0911%" y="133" width="0.0108%" height="15" fill="rgb(209,12,38)" fg:x="16855" fg:w="30"/><text x="6.3411%" y="143.50"></text></g><g><title>sltskyg (30 samples, 0.01%)</title><rect x="6.0911%" y="117" width="0.0108%" height="15" fill="rgb(227,1,9)" fg:x="16855" fg:w="30"/><text x="6.3411%" y="127.50"></text></g><g><title>__GI___pthread_getspecific (847 samples, 0.31%)</title><rect x="6.6823%" y="101" width="0.3061%" height="15" fill="rgb(248,47,43)" fg:x="18491" fg:w="847"/><text x="6.9323%" y="111.50"></text></g><g><title>sltskyg (1,338 samples, 0.48%)</title><rect x="6.5186%" y="117" width="0.4835%" height="15" fill="rgb(221,10,30)" fg:x="18038" fg:w="1338"/><text x="6.7686%" y="127.50"></text></g><g><title>pthread_getspecific@plt (38 samples, 0.01%)</title><rect x="6.9884%" y="101" width="0.0137%" height="15" fill="rgb(210,229,1)" fg:x="19338" fg:w="38"/><text x="7.2384%" y="111.50"></text></g><g><title>kpltKeyGet (2,540 samples, 0.92%)</title><rect x="6.1019%" y="133" width="0.9179%" height="15" fill="rgb(222,148,37)" fg:x="16885" fg:w="2540"/><text x="6.3519%" y="143.50"></text></g><g><title>sltskyg@plt (49 samples, 0.02%)</title><rect x="7.0021%" y="117" width="0.0177%" height="15" fill="rgb(234,67,33)" fg:x="19376" fg:w="49"/><text x="7.2521%" y="127.50"></text></g><g><title>dpiOci__threadKeyGet (2,942 samples, 1.06%)</title><rect x="5.9693%" y="149" width="1.0632%" height="15" fill="rgb(247,98,35)" fg:x="16518" fg:w="2942"/><text x="6.2193%" y="159.50"></text></g><g><title>kpltKeyGet@plt (35 samples, 0.01%)</title><rect x="7.0198%" y="133" width="0.0126%" height="15" fill="rgb(247,138,52)" fg:x="19425" fg:w="35"/><text x="7.2698%" y="143.50"></text></g><g><title>dpiVar__checkArraySize (6,601 samples, 2.39%)</title><rect x="4.6756%" y="213" width="2.3855%" height="15" fill="rgb(213,79,30)" fg:x="12938" fg:w="6601"/><text x="4.9256%" y="223.50">dp..</text></g><g><title>dpiGen__startPublicFn (6,463 samples, 2.34%)</title><rect x="4.7254%" y="197" width="2.3356%" height="15" fill="rgb(246,177,23)" fg:x="13076" fg:w="6463"/><text x="4.9754%" y="207.50">d..</text></g><g><title>dpiGlobal__initError (5,594 samples, 2.02%)</title><rect x="5.0395%" y="181" width="2.0216%" height="15" fill="rgb(230,62,27)" fg:x="13945" fg:w="5594"/><text x="5.2895%" y="191.50">d..</text></g><g><title>dpiGlobal__getErrorBuffer (3,794 samples, 1.37%)</title><rect x="5.6899%" y="165" width="1.3711%" height="15" fill="rgb(216,154,8)" fg:x="15745" fg:w="3794"/><text x="5.9399%" y="175.50"></text></g><g><title>strcpy (79 samples, 0.03%)</title><rect x="7.0325%" y="149" width="0.0285%" height="15" fill="rgb(244,35,45)" fg:x="19460" fg:w="79"/><text x="7.2825%" y="159.50"></text></g><g><title>dpiVar__copyData (10,349 samples, 3.74%)</title><rect x="7.0610%" y="213" width="3.7399%" height="15" fill="rgb(251,115,12)" fg:x="19539" fg:w="10349"/><text x="7.3110%" y="223.50">dpiV..</text></g><g><title>[rust_oracle_performance] (34 samples, 0.01%)</title><rect x="11.1497%" y="181" width="0.0123%" height="15" fill="rgb(240,54,50)" fg:x="30853" fg:w="34"/><text x="11.3997%" y="191.50"></text></g><g><title>dpiVar_copyData (42,998 samples, 15.54%)</title><rect x="3.7092%" y="229" width="15.5387%" height="15" fill="rgb(233,84,52)" fg:x="10264" fg:w="42998"/><text x="3.9592%" y="239.50">dpiVar_copyData</text></g><g><title>dpiVar__setFromBytes (23,374 samples, 8.45%)</title><rect x="10.8010%" y="213" width="8.4469%" height="15" fill="rgb(207,117,47)" fg:x="29888" fg:w="23374"/><text x="11.0510%" y="223.50">dpiVar__setF..</text></g><g><title>memcpy (22,498 samples, 8.13%)</title><rect x="11.1175%" y="197" width="8.1304%" height="15" fill="rgb(249,43,39)" fg:x="30764" fg:w="22498"/><text x="11.3675%" y="207.50">memcpy</text></g><g><title>__memcpy_ssse3 (22,375 samples, 8.09%)</title><rect x="11.1620%" y="181" width="8.0859%" height="15" fill="rgb(209,38,44)" fg:x="30887" fg:w="22375"/><text x="11.4120%" y="191.50">__memcpy_ss..</text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="19.2345%" y="165" width="0.0134%" height="15" fill="rgb(236,212,23)" fg:x="53225" fg:w="37"/><text x="19.4845%" y="175.50"></text></g><g><title>oracle::sql_value::SqlValue::buffer_row_index (307 samples, 0.11%)</title><rect x="19.2479%" y="229" width="0.1109%" height="15" fill="rgb(242,79,21)" fg:x="53262" fg:w="307"/><text x="19.4979%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (210 samples, 0.08%)</title><rect x="19.2829%" y="213" width="0.0759%" height="15" fill="rgb(211,96,35)" fg:x="53359" fg:w="210"/><text x="19.5329%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (210 samples, 0.08%)</title><rect x="19.2829%" y="197" width="0.0759%" height="15" fill="rgb(253,215,40)" fg:x="53359" fg:w="210"/><text x="19.5329%" y="207.50"></text></g><g><title>core::cell::BorrowRef::new (159 samples, 0.06%)</title><rect x="19.3014%" y="181" width="0.0575%" height="15" fill="rgb(211,81,21)" fg:x="53410" fg:w="159"/><text x="19.5514%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.01%)</title><rect x="20.1336%" y="213" width="0.0130%" height="15" fill="rgb(208,190,38)" fg:x="55713" fg:w="36"/><text x="20.3836%" y="223.50"></text></g><g><title>&lt;oracle::sql_type::oracle_type::OracleType as core::clone::Clone&gt;::clone (421 samples, 0.15%)</title><rect x="20.1466%" y="213" width="0.1521%" height="15" fill="rgb(235,213,38)" fg:x="55749" fg:w="421"/><text x="20.3966%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;oracle::sql_type::oracle_type::OracleType&gt;&gt; (85 samples, 0.03%)</title><rect x="20.2999%" y="213" width="0.0307%" height="15" fill="rgb(237,122,38)" fg:x="56173" fg:w="85"/><text x="20.5499%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;oracle::sql_type::oracle_type::NativeType&gt; (45 samples, 0.02%)</title><rect x="20.3306%" y="213" width="0.0163%" height="15" fill="rgb(244,218,35)" fg:x="56258" fg:w="45"/><text x="20.5806%" y="223.50"></text></g><g><title>dpiConn__checkConnected (281 samples, 0.10%)</title><rect x="20.7639%" y="181" width="0.1015%" height="15" fill="rgb(240,68,47)" fg:x="57457" fg:w="281"/><text x="21.0139%" y="191.50"></text></g><g><title>dpiGen__checkHandle (311 samples, 0.11%)</title><rect x="21.0649%" y="165" width="0.1124%" height="15" fill="rgb(210,16,53)" fg:x="58290" fg:w="311"/><text x="21.3149%" y="175.50"></text></g><g><title>OCIThreadKeyGet (180 samples, 0.07%)</title><rect x="21.9854%" y="117" width="0.0650%" height="15" fill="rgb(235,124,12)" fg:x="60837" fg:w="180"/><text x="22.2354%" y="127.50"></text></g><g><title>dpiOci__threadKeyGet (37 samples, 0.01%)</title><rect x="22.0504%" y="117" width="0.0134%" height="15" fill="rgb(224,169,11)" fg:x="61017" fg:w="37"/><text x="22.3004%" y="127.50"></text></g><g><title>sltskyg (37 samples, 0.01%)</title><rect x="22.0504%" y="101" width="0.0134%" height="15" fill="rgb(250,166,2)" fg:x="61017" fg:w="37"/><text x="22.3004%" y="111.50"></text></g><g><title>__GI___pthread_getspecific (486 samples, 0.18%)</title><rect x="22.4841%" y="85" width="0.1756%" height="15" fill="rgb(242,216,29)" fg:x="62217" fg:w="486"/><text x="22.7341%" y="95.50"></text></g><g><title>sltskyg (875 samples, 0.32%)</title><rect x="22.3594%" y="101" width="0.3162%" height="15" fill="rgb(230,116,27)" fg:x="61872" fg:w="875"/><text x="22.6094%" y="111.50"></text></g><g><title>pthread_getspecific@plt (44 samples, 0.02%)</title><rect x="22.6597%" y="85" width="0.0159%" height="15" fill="rgb(228,99,48)" fg:x="62703" fg:w="44"/><text x="22.9097%" y="95.50"></text></g><g><title>kpltKeyGet (1,728 samples, 0.62%)</title><rect x="22.0638%" y="117" width="0.6245%" height="15" fill="rgb(253,11,6)" fg:x="61054" fg:w="1728"/><text x="22.3138%" y="127.50"></text></g><g><title>sltskyg@plt (35 samples, 0.01%)</title><rect x="22.6756%" y="101" width="0.0126%" height="15" fill="rgb(247,143,39)" fg:x="62747" fg:w="35"/><text x="22.9256%" y="111.50"></text></g><g><title>dpiOci__threadKeyGet (2,191 samples, 0.79%)</title><rect x="21.9120%" y="133" width="0.7918%" height="15" fill="rgb(236,97,10)" fg:x="60634" fg:w="2191"/><text x="22.1620%" y="143.50"></text></g><g><title>kpltKeyGet@plt (43 samples, 0.02%)</title><rect x="22.6882%" y="117" width="0.0155%" height="15" fill="rgb(233,208,19)" fg:x="62782" fg:w="43"/><text x="22.9382%" y="127.50"></text></g><g><title>dpiConn__check (5,567 samples, 2.01%)</title><rect x="20.7194%" y="197" width="2.0118%" height="15" fill="rgb(216,164,2)" fg:x="57334" fg:w="5567"/><text x="20.9694%" y="207.50">d..</text></g><g><title>dpiGen__startPublicFn (5,163 samples, 1.87%)</title><rect x="20.8654%" y="181" width="1.8658%" height="15" fill="rgb(220,129,5)" fg:x="57738" fg:w="5163"/><text x="21.1154%" y="191.50">d..</text></g><g><title>dpiGlobal__initError (4,300 samples, 1.55%)</title><rect x="21.1773%" y="165" width="1.5539%" height="15" fill="rgb(242,17,10)" fg:x="58601" fg:w="4300"/><text x="21.4273%" y="175.50"></text></g><g><title>dpiGlobal__getErrorBuffer (2,963 samples, 1.07%)</title><rect x="21.6605%" y="149" width="1.0708%" height="15" fill="rgb(242,107,0)" fg:x="59938" fg:w="2963"/><text x="21.9105%" y="159.50"></text></g><g><title>strcpy (76 samples, 0.03%)</title><rect x="22.7038%" y="133" width="0.0275%" height="15" fill="rgb(251,28,31)" fg:x="62825" fg:w="76"/><text x="22.9538%" y="143.50"></text></g><g><title>dpiGen__endPublicFn (303 samples, 0.11%)</title><rect x="22.7312%" y="197" width="0.1095%" height="15" fill="rgb(233,223,10)" fg:x="62901" fg:w="303"/><text x="22.9812%" y="207.50"></text></g><g><title>[rust_oracle_performance] (72 samples, 0.03%)</title><rect x="25.7159%" y="149" width="0.0260%" height="15" fill="rgb(215,21,27)" fg:x="71160" fg:w="72"/><text x="25.9659%" y="159.50"></text></g><g><title>alloc_perturb (123 samples, 0.04%)</title><rect x="29.7688%" y="117" width="0.0444%" height="15" fill="rgb(232,23,21)" fg:x="82375" fg:w="123"/><text x="30.0188%" y="127.50"></text></g><g><title>__calloc (11,421 samples, 4.13%)</title><rect x="25.7419%" y="149" width="4.1273%" height="15" fill="rgb(244,5,23)" fg:x="71232" fg:w="11421"/><text x="25.9919%" y="159.50">__ca..</text></g><g><title>_int_malloc (4,011 samples, 1.45%)</title><rect x="28.4198%" y="133" width="1.4495%" height="15" fill="rgb(226,81,46)" fg:x="78642" fg:w="4011"/><text x="28.6698%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (155 samples, 0.06%)</title><rect x="29.8132%" y="117" width="0.0560%" height="15" fill="rgb(247,70,30)" fg:x="82498" fg:w="155"/><text x="30.0632%" y="127.50"></text></g><g><title>__memset_sse2_unaligned (220 samples, 0.08%)</title><rect x="29.8693%" y="149" width="0.0795%" height="15" fill="rgb(212,68,19)" fg:x="82653" fg:w="220"/><text x="30.1193%" y="159.50"></text></g><g><title>dpiGen__allocate (13,774 samples, 4.98%)</title><rect x="25.1879%" y="181" width="4.9777%" height="15" fill="rgb(240,187,13)" fg:x="69699" fg:w="13774"/><text x="25.4379%" y="191.50">dpiGen..</text></g><g><title>dpiUtils__allocateMemory (12,916 samples, 4.67%)</title><rect x="25.4980%" y="165" width="4.6676%" height="15" fill="rgb(223,113,26)" fg:x="70557" fg:w="12916"/><text x="25.7480%" y="175.50">dpiUt..</text></g><g><title>__memset_sse2_unaligned_erms (600 samples, 0.22%)</title><rect x="29.9488%" y="149" width="0.2168%" height="15" fill="rgb(206,192,2)" fg:x="82873" fg:w="600"/><text x="30.1988%" y="159.50"></text></g><g><title>[rust_oracle_performance] (66 samples, 0.02%)</title><rect x="30.4142%" y="165" width="0.0239%" height="15" fill="rgb(241,108,4)" fg:x="84161" fg:w="66"/><text x="30.6642%" y="175.50"></text></g><g><title>__GI___pthread_mutex_lock (3,202 samples, 1.16%)</title><rect x="30.4384%" y="165" width="1.1571%" height="15" fill="rgb(247,173,49)" fg:x="84228" fg:w="3202"/><text x="30.6884%" y="175.50"></text></g><g><title>__GI___pthread_mutex_unlock (62 samples, 0.02%)</title><rect x="31.5956%" y="165" width="0.0224%" height="15" fill="rgb(224,114,35)" fg:x="87430" fg:w="62"/><text x="31.8456%" y="175.50"></text></g><g><title>dpiGen__setRefCount (7,364 samples, 2.66%)</title><rect x="30.1656%" y="181" width="2.6612%" height="15" fill="rgb(245,159,27)" fg:x="83473" fg:w="7364"/><text x="30.4156%" y="191.50">dp..</text></g><g><title>__pthread_mutex_unlock_usercnt (3,345 samples, 1.21%)</title><rect x="31.6180%" y="165" width="1.2088%" height="15" fill="rgb(245,172,44)" fg:x="87492" fg:w="3345"/><text x="31.8680%" y="175.50"></text></g><g><title>dpiOracleType__getFromNum (125 samples, 0.05%)</title><rect x="32.8268%" y="181" width="0.0452%" height="15" fill="rgb(236,23,11)" fg:x="90837" fg:w="125"/><text x="33.0768%" y="191.50"></text></g><g><title>[rust_oracle_performance] (46 samples, 0.02%)</title><rect x="33.7165%" y="165" width="0.0166%" height="15" fill="rgb(205,117,38)" fg:x="93299" fg:w="46"/><text x="33.9665%" y="175.50"></text></g><g><title>__memset_sse2_unaligned (169 samples, 0.06%)</title><rect x="33.7368%" y="165" width="0.0611%" height="15" fill="rgb(237,72,25)" fg:x="93355" fg:w="169"/><text x="33.9868%" y="175.50"></text></g><g><title>__memset_sse2_unaligned_erms (195 samples, 0.07%)</title><rect x="33.7978%" y="165" width="0.0705%" height="15" fill="rgb(244,70,9)" fg:x="93524" fg:w="195"/><text x="34.0478%" y="175.50"></text></g><g><title>[rust_oracle_performance] (189 samples, 0.07%)</title><rect x="34.5990%" y="149" width="0.0683%" height="15" fill="rgb(217,125,39)" fg:x="95741" fg:w="189"/><text x="34.8490%" y="159.50"></text></g><g><title>alloc_perturb (172 samples, 0.06%)</title><rect x="47.5130%" y="117" width="0.0622%" height="15" fill="rgb(235,36,10)" fg:x="131476" fg:w="172"/><text x="47.7630%" y="127.50"></text></g><g><title>__GI___libc_malloc (37,801 samples, 13.66%)</title><rect x="34.6677%" y="149" width="13.6606%" height="15" fill="rgb(251,123,47)" fg:x="95931" fg:w="37801"/><text x="34.9177%" y="159.50">__GI___libc_malloc</text></g><g><title>_int_malloc (19,319 samples, 6.98%)</title><rect x="41.3467%" y="133" width="6.9815%" height="15" fill="rgb(221,13,13)" fg:x="114413" fg:w="19319"/><text x="41.5967%" y="143.50">_int_mall..</text></g><g><title>unlink_chunk.constprop.0 (2,084 samples, 0.75%)</title><rect x="47.5751%" y="117" width="0.7531%" height="15" fill="rgb(238,131,9)" fg:x="131648" fg:w="2084"/><text x="47.8251%" y="127.50"></text></g><g><title>alloc_perturb (91 samples, 0.03%)</title><rect x="51.1163%" y="117" width="0.0329%" height="15" fill="rgb(211,50,8)" fg:x="141447" fg:w="91"/><text x="51.3663%" y="127.50"></text></g><g><title>dpiVar__initBuffer (50,643 samples, 18.30%)</title><rect x="32.8720%" y="181" width="18.3014%" height="15" fill="rgb(245,182,24)" fg:x="90962" fg:w="50643"/><text x="33.1220%" y="191.50">dpiVar__initBuffer</text></g><g><title>dpiUtils__allocateMemory (47,883 samples, 17.30%)</title><rect x="33.8694%" y="165" width="17.3040%" height="15" fill="rgb(242,14,37)" fg:x="93722" fg:w="47883"/><text x="34.1194%" y="175.50">dpiUtils__allocateMemory</text></g><g><title>__calloc (7,873 samples, 2.85%)</title><rect x="48.3282%" y="149" width="2.8452%" height="15" fill="rgb(246,228,12)" fg:x="133732" fg:w="7873"/><text x="48.5782%" y="159.50">__..</text></g><g><title>_int_malloc (2,733 samples, 0.99%)</title><rect x="50.1858%" y="133" width="0.9877%" height="15" fill="rgb(213,55,15)" fg:x="138872" fg:w="2733"/><text x="50.4358%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (67 samples, 0.02%)</title><rect x="51.1492%" y="117" width="0.0242%" height="15" fill="rgb(209,9,3)" fg:x="141538" fg:w="67"/><text x="51.3992%" y="127.50"></text></g><g><title>dpiConn_newVar (85,336 samples, 30.84%)</title><rect x="20.3469%" y="213" width="30.8388%" height="15" fill="rgb(230,59,30)" fg:x="56303" fg:w="85336"/><text x="20.5969%" y="223.50">dpiConn_newVar</text></g><g><title>dpiVar__allocate (78,431 samples, 28.34%)</title><rect x="22.8422%" y="197" width="28.3435%" height="15" fill="rgb(209,121,21)" fg:x="63208" fg:w="78431"/><text x="23.0922%" y="207.50">dpiVar__allocate</text></g><g><title>dpiVar__validateTypes (34 samples, 0.01%)</title><rect x="51.1734%" y="181" width="0.0123%" height="15" fill="rgb(220,109,13)" fg:x="141605" fg:w="34"/><text x="51.4234%" y="191.50"></text></g><g><title>oracle::sql_type::oracle_type::OracleType::var_create_param (758 samples, 0.27%)</title><rect x="51.1857%" y="213" width="0.2739%" height="15" fill="rgb(232,18,1)" fg:x="141639" fg:w="758"/><text x="51.4357%" y="223.50"></text></g><g><title>oracle::sql_value::SqlValue::handle_is_reusable (33 samples, 0.01%)</title><rect x="51.4596%" y="213" width="0.0119%" height="15" fill="rgb(215,41,42)" fg:x="142397" fg:w="33"/><text x="51.7096%" y="223.50"></text></g><g><title>oracle::sql_value::SqlValue::init_handle (88,988 samples, 32.16%)</title><rect x="19.3588%" y="229" width="32.1586%" height="15" fill="rgb(224,123,36)" fg:x="53569" fg:w="88988"/><text x="19.6088%" y="239.50">oracle::sql_value::SqlValue::init_handle</text></g><g><title>oracle::sql_value::SqlValue::init_handle (127 samples, 0.05%)</title><rect x="51.4715%" y="213" width="0.0459%" height="15" fill="rgb(240,125,3)" fg:x="142430" fg:w="127"/><text x="51.7215%" y="223.50"></text></g><g><title>&lt;oracle::row::Row as oracle::row::RowValue&gt;::get (140,545 samples, 50.79%)</title><rect x="0.9602%" y="261" width="50.7903%" height="15" fill="rgb(205,98,50)" fg:x="2657" fg:w="140545"/><text x="1.2102%" y="271.50">&lt;oracle::row::Row as oracle::row::RowValue&gt;::get</text></g><g><title>oracle::sql_value::SqlValue::dup_by_handle (138,161 samples, 49.93%)</title><rect x="1.8217%" y="245" width="49.9288%" height="15" fill="rgb(205,185,37)" fg:x="5041" fg:w="138161"/><text x="2.0717%" y="255.50">oracle::sql_value::SqlValue::dup_by_handle</text></g><g><title>oracle::sql_value::SqlValue::new (645 samples, 0.23%)</title><rect x="51.5174%" y="229" width="0.2331%" height="15" fill="rgb(238,207,15)" fg:x="142557" fg:w="645"/><text x="51.7674%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (372 samples, 0.13%)</title><rect x="51.6161%" y="213" width="0.1344%" height="15" fill="rgb(213,199,42)" fg:x="142830" fg:w="372"/><text x="51.8661%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (140,596 samples, 50.81%)</title><rect x="0.9472%" y="341" width="50.8088%" height="15" fill="rgb(235,201,11)" fg:x="2621" fg:w="140596"/><text x="1.1972%" y="351.50">core::option::Option&lt;T&gt;::map</text></g><g><title>&lt;oracle::row::ResultSet&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (140,564 samples, 50.80%)</title><rect x="0.9587%" y="325" width="50.7972%" height="15" fill="rgb(207,46,11)" fg:x="2653" fg:w="140564"/><text x="1.2087%" y="335.50">&lt;oracle::row::ResultSet&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closu..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (140,564 samples, 50.80%)</title><rect x="0.9587%" y="309" width="50.7972%" height="15" fill="rgb(241,35,35)" fg:x="2653" fg:w="140564"/><text x="1.2087%" y="319.50">core::result::Result&lt;T,E&gt;::and_then</text></g><g><title>&lt;oracle::row::ResultSet&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}}::{{closure}} (140,561 samples, 50.80%)</title><rect x="0.9598%" y="293" width="50.7961%" height="15" fill="rgb(243,32,47)" fg:x="2656" fg:w="140561"/><text x="1.2098%" y="303.50">&lt;oracle::row::ResultSet&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closu..</text></g><g><title>oracle::row::Row::get_as (140,561 samples, 50.80%)</title><rect x="0.9598%" y="277" width="50.7961%" height="15" fill="rgb(247,202,23)" fg:x="2656" fg:w="140561"/><text x="1.2098%" y="287.50">oracle::row::Row::get_as</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (30 samples, 0.01%)</title><rect x="51.7679%" y="325" width="0.0108%" height="15" fill="rgb(219,102,11)" fg:x="143250" fg:w="30"/><text x="52.0179%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (30 samples, 0.01%)</title><rect x="51.7679%" y="309" width="0.0108%" height="15" fill="rgb(243,110,44)" fg:x="143250" fg:w="30"/><text x="52.0179%" y="319.50"></text></g><g><title>core::cell::BorrowRefMut::new (30 samples, 0.01%)</title><rect x="51.7679%" y="293" width="0.0108%" height="15" fill="rgb(222,74,54)" fg:x="143250" fg:w="30"/><text x="52.0179%" y="303.50"></text></g><g><title>kpltKeyGet (39 samples, 0.01%)</title><rect x="51.8434%" y="229" width="0.0141%" height="15" fill="rgb(216,99,12)" fg:x="143459" fg:w="39"/><text x="52.0934%" y="239.50"></text></g><g><title>dpiOci__threadKeyGet (67 samples, 0.02%)</title><rect x="51.8340%" y="245" width="0.0242%" height="15" fill="rgb(226,22,26)" fg:x="143433" fg:w="67"/><text x="52.0840%" y="255.50"></text></g><g><title>dpiStmt__check (194 samples, 0.07%)</title><rect x="51.7885%" y="309" width="0.0701%" height="15" fill="rgb(217,163,10)" fg:x="143307" fg:w="194"/><text x="52.0385%" y="319.50"></text></g><g><title>dpiGen__startPublicFn (141 samples, 0.05%)</title><rect x="51.8076%" y="293" width="0.0510%" height="15" fill="rgb(213,25,53)" fg:x="143360" fg:w="141"/><text x="52.0576%" y="303.50"></text></g><g><title>dpiGlobal__initError (107 samples, 0.04%)</title><rect x="51.8199%" y="277" width="0.0387%" height="15" fill="rgb(252,105,26)" fg:x="143394" fg:w="107"/><text x="52.0699%" y="287.50"></text></g><g><title>dpiGlobal__getErrorBuffer (82 samples, 0.03%)</title><rect x="51.8290%" y="261" width="0.0296%" height="15" fill="rgb(220,39,43)" fg:x="143419" fg:w="82"/><text x="52.0790%" y="271.50"></text></g><g><title>dpiOci__stmtFetch2 (142 samples, 0.05%)</title><rect x="51.8647%" y="293" width="0.0513%" height="15" fill="rgb(229,68,48)" fg:x="143518" fg:w="142"/><text x="52.1147%" y="303.50"></text></g><g><title>kpufch (123 samples, 0.04%)</title><rect x="51.8716%" y="277" width="0.0444%" height="15" fill="rgb(252,8,32)" fg:x="143537" fg:w="123"/><text x="52.1216%" y="287.50"></text></g><g><title>dpiDataBuffer__fromOracleNumberAsText (194 samples, 0.07%)</title><rect x="52.0057%" y="277" width="0.0701%" height="15" fill="rgb(223,20,43)" fg:x="143908" fg:w="194"/><text x="52.2557%" y="287.50"></text></g><g><title>dpiUtils__parseOracleNumber (81 samples, 0.03%)</title><rect x="52.0465%" y="261" width="0.0293%" height="15" fill="rgb(229,81,49)" fg:x="144021" fg:w="81"/><text x="52.2965%" y="271.50"></text></g><g><title>&lt;oracle::row::ResultSet&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (144,237 samples, 52.12%)</title><rect x="0.9472%" y="357" width="52.1246%" height="15" fill="rgb(236,28,36)" fg:x="2621" fg:w="144237"/><text x="1.1972%" y="367.50">&lt;oracle::row::ResultSet&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>oracle::statement::Stmt::next (3,639 samples, 1.32%)</title><rect x="51.7567%" y="341" width="1.3151%" height="15" fill="rgb(249,185,26)" fg:x="143219" fg:w="3639"/><text x="52.0067%" y="351.50"></text></g><g><title>dpiStmt_fetch (3,577 samples, 1.29%)</title><rect x="51.7791%" y="325" width="1.2927%" height="15" fill="rgb(249,174,33)" fg:x="143281" fg:w="3577"/><text x="52.0291%" y="335.50"></text></g><g><title>dpiStmt__fetch (3,357 samples, 1.21%)</title><rect x="51.8586%" y="309" width="1.2132%" height="15" fill="rgb(233,201,37)" fg:x="143501" fg:w="3357"/><text x="52.1086%" y="319.50"></text></g><g><title>dpiStmt__postFetch (3,190 samples, 1.15%)</title><rect x="51.9189%" y="293" width="1.1528%" height="15" fill="rgb(221,78,26)" fg:x="143668" fg:w="3190"/><text x="52.1689%" y="303.50"></text></g><g><title>dpiVar__getValue (2,755 samples, 1.00%)</title><rect x="52.0761%" y="277" width="0.9956%" height="15" fill="rgb(250,127,30)" fg:x="144103" fg:w="2755"/><text x="52.3261%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;oracle::row::RowSharedData&gt;&gt; (65 samples, 0.02%)</title><rect x="53.0743%" y="341" width="0.0235%" height="15" fill="rgb(230,49,44)" fg:x="146865" fg:w="65"/><text x="53.3243%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.02%)</title><rect x="53.0743%" y="325" width="0.0235%" height="15" fill="rgb(229,67,23)" fg:x="146865" fg:w="65"/><text x="53.3243%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (50 samples, 0.02%)</title><rect x="53.3196%" y="261" width="0.0181%" height="15" fill="rgb(249,83,47)" fg:x="147544" fg:w="50"/><text x="53.5696%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (50 samples, 0.02%)</title><rect x="53.3196%" y="245" width="0.0181%" height="15" fill="rgb(215,43,3)" fg:x="147544" fg:w="50"/><text x="53.5696%" y="255.50"></text></g><g><title>[rust_oracle_performance] (34 samples, 0.01%)</title><rect x="53.5076%" y="245" width="0.0123%" height="15" fill="rgb(238,154,13)" fg:x="148064" fg:w="34"/><text x="53.7576%" y="255.50"></text></g><g><title>malloc_consolidate (1,985 samples, 0.72%)</title><rect x="55.9491%" y="213" width="0.7173%" height="15" fill="rgb(219,56,2)" fg:x="154820" fg:w="1985"/><text x="56.1991%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (122 samples, 0.04%)</title><rect x="56.6223%" y="197" width="0.0441%" height="15" fill="rgb(233,0,4)" fg:x="156683" fg:w="122"/><text x="56.8723%" y="207.50"></text></g><g><title>_int_free (8,828 samples, 3.19%)</title><rect x="53.6326%" y="229" width="3.1903%" height="15" fill="rgb(235,30,7)" fg:x="148410" fg:w="8828"/><text x="53.8826%" y="239.50">_in..</text></g><g><title>unlink_chunk.constprop.0 (433 samples, 0.16%)</title><rect x="56.6664%" y="213" width="0.1565%" height="15" fill="rgb(250,79,13)" fg:x="156805" fg:w="433"/><text x="56.9164%" y="223.50"></text></g><g><title>__GI___libc_free (9,141 samples, 3.30%)</title><rect x="53.5199%" y="245" width="3.3034%" height="15" fill="rgb(211,146,34)" fg:x="148098" fg:w="9141"/><text x="53.7699%" y="255.50">__G..</text></g><g><title>dpiGen__endPublicFn (233 samples, 0.08%)</title><rect x="56.8232%" y="245" width="0.0842%" height="15" fill="rgb(228,22,38)" fg:x="157239" fg:w="233"/><text x="57.0732%" y="255.50"></text></g><g><title>[rust_oracle_performance] (77 samples, 0.03%)</title><rect x="57.1557%" y="229" width="0.0278%" height="15" fill="rgb(235,168,5)" fg:x="158159" fg:w="77"/><text x="57.4057%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (7,283 samples, 2.63%)</title><rect x="57.1835%" y="229" width="2.6319%" height="15" fill="rgb(221,155,16)" fg:x="158236" fg:w="7283"/><text x="57.4335%" y="239.50">__..</text></g><g><title>__GI___pthread_mutex_unlock (57 samples, 0.02%)</title><rect x="59.8155%" y="229" width="0.0206%" height="15" fill="rgb(215,215,53)" fg:x="165519" fg:w="57"/><text x="60.0655%" y="239.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (2,296 samples, 0.83%)</title><rect x="59.8361%" y="229" width="0.8297%" height="15" fill="rgb(223,4,10)" fg:x="165576" fg:w="2296"/><text x="60.0861%" y="239.50"></text></g><g><title>dpiGen__setRefCount (34 samples, 0.01%)</title><rect x="60.6658%" y="229" width="0.0123%" height="15" fill="rgb(234,103,6)" fg:x="167872" fg:w="34"/><text x="60.9158%" y="239.50"></text></g><g><title>dpiGen__setRefCount (10,750 samples, 3.88%)</title><rect x="56.9074%" y="245" width="3.8848%" height="15" fill="rgb(227,97,0)" fg:x="157472" fg:w="10750"/><text x="57.1574%" y="255.50">dpiG..</text></g><g><title>dpiUtils__clearMemory (316 samples, 0.11%)</title><rect x="60.6781%" y="229" width="0.1142%" height="15" fill="rgb(234,150,53)" fg:x="167906" fg:w="316"/><text x="60.9281%" y="239.50"></text></g><g><title>dpiGen__checkHandle (287 samples, 0.10%)</title><rect x="60.9835%" y="229" width="0.1037%" height="15" fill="rgb(228,201,54)" fg:x="168751" fg:w="287"/><text x="61.2335%" y="239.50"></text></g><g><title>dpiGlobal__initError (28 samples, 0.01%)</title><rect x="61.6495%" y="197" width="0.0101%" height="15" fill="rgb(222,22,37)" fg:x="170594" fg:w="28"/><text x="61.8995%" y="207.50"></text></g><g><title>dpiGlobal__getErrorBuffer (28 samples, 0.01%)</title><rect x="61.6495%" y="181" width="0.0101%" height="15" fill="rgb(237,53,32)" fg:x="170594" fg:w="28"/><text x="61.8995%" y="191.50"></text></g><g><title>kpltKeyGet (28 samples, 0.01%)</title><rect x="61.6495%" y="165" width="0.0101%" height="15" fill="rgb(233,25,53)" fg:x="170594" fg:w="28"/><text x="61.8995%" y="175.50"></text></g><g><title>OCIThreadKeyGet (408 samples, 0.15%)</title><rect x="61.7272%" y="181" width="0.1474%" height="15" fill="rgb(210,40,34)" fg:x="170809" fg:w="408"/><text x="61.9772%" y="191.50"></text></g><g><title>dpiOci__threadKeyGet (33 samples, 0.01%)</title><rect x="61.8746%" y="181" width="0.0119%" height="15" fill="rgb(241,220,44)" fg:x="171217" fg:w="33"/><text x="62.1246%" y="191.50"></text></g><g><title>sltskyg (33 samples, 0.01%)</title><rect x="61.8746%" y="165" width="0.0119%" height="15" fill="rgb(235,28,35)" fg:x="171217" fg:w="33"/><text x="62.1246%" y="175.50"></text></g><g><title>__GI___pthread_getspecific (544 samples, 0.20%)</title><rect x="62.4243%" y="149" width="0.1966%" height="15" fill="rgb(210,56,17)" fg:x="172738" fg:w="544"/><text x="62.6743%" y="159.50"></text></g><g><title>sltskyg (1,006 samples, 0.36%)</title><rect x="62.2689%" y="165" width="0.3635%" height="15" fill="rgb(224,130,29)" fg:x="172308" fg:w="1006"/><text x="62.5189%" y="175.50"></text></g><g><title>pthread_getspecific@plt (32 samples, 0.01%)</title><rect x="62.6209%" y="149" width="0.0116%" height="15" fill="rgb(235,212,8)" fg:x="173282" fg:w="32"/><text x="62.8709%" y="159.50"></text></g><g><title>kpltKeyGet (2,105 samples, 0.76%)</title><rect x="61.8866%" y="181" width="0.7607%" height="15" fill="rgb(223,33,50)" fg:x="171250" fg:w="2105"/><text x="62.1366%" y="191.50"></text></g><g><title>sltskyg@plt (41 samples, 0.01%)</title><rect x="62.6324%" y="165" width="0.0148%" height="15" fill="rgb(219,149,13)" fg:x="173314" fg:w="41"/><text x="62.8824%" y="175.50"></text></g><g><title>dpiOci__threadKeyGet (2,768 samples, 1.00%)</title><rect x="61.6596%" y="197" width="1.0003%" height="15" fill="rgb(250,156,29)" fg:x="170622" fg:w="2768"/><text x="61.9096%" y="207.50"></text></g><g><title>kpltKeyGet@plt (35 samples, 0.01%)</title><rect x="62.6473%" y="181" width="0.0126%" height="15" fill="rgb(216,193,19)" fg:x="173355" fg:w="35"/><text x="62.8973%" y="191.50"></text></g><g><title>dpiGen__startPublicFn (5,246 samples, 1.90%)</title><rect x="60.7923%" y="245" width="1.8958%" height="15" fill="rgb(216,135,14)" fg:x="168222" fg:w="5246"/><text x="61.0423%" y="255.50">d..</text></g><g><title>dpiGlobal__initError (4,430 samples, 1.60%)</title><rect x="61.0872%" y="229" width="1.6009%" height="15" fill="rgb(241,47,5)" fg:x="169038" fg:w="4430"/><text x="61.3372%" y="239.50"></text></g><g><title>dpiGlobal__getErrorBuffer (3,517 samples, 1.27%)</title><rect x="61.4171%" y="213" width="1.2710%" height="15" fill="rgb(233,42,35)" fg:x="169951" fg:w="3517"/><text x="61.6671%" y="223.50"></text></g><g><title>strcpy (78 samples, 0.03%)</title><rect x="62.6599%" y="197" width="0.0282%" height="15" fill="rgb(231,13,6)" fg:x="173390" fg:w="78"/><text x="62.9099%" y="207.50"></text></g><g><title>dpiUtils__freeMemory (100 samples, 0.04%)</title><rect x="62.6881%" y="245" width="0.0361%" height="15" fill="rgb(207,181,40)" fg:x="173468" fg:w="100"/><text x="62.9381%" y="255.50"></text></g><g><title>[rust_oracle_performance] (77 samples, 0.03%)</title><rect x="63.0332%" y="213" width="0.0278%" height="15" fill="rgb(254,173,49)" fg:x="174423" fg:w="77"/><text x="63.2832%" y="223.50"></text></g><g><title>__GI___pthread_mutex_lock (2,919 samples, 1.05%)</title><rect x="63.0610%" y="213" width="1.0549%" height="15" fill="rgb(221,1,38)" fg:x="174500" fg:w="2919"/><text x="63.3110%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (53 samples, 0.02%)</title><rect x="64.1159%" y="213" width="0.0192%" height="15" fill="rgb(206,124,46)" fg:x="177419" fg:w="53"/><text x="64.3659%" y="223.50"></text></g><g><title>dpiGen__setRefCount (6,134 samples, 2.22%)</title><rect x="62.8511%" y="229" width="2.2167%" height="15" fill="rgb(249,21,11)" fg:x="173919" fg:w="6134"/><text x="63.1011%" y="239.50">d..</text></g><g><title>__pthread_mutex_unlock_usercnt (2,581 samples, 0.93%)</title><rect x="64.1351%" y="213" width="0.9327%" height="15" fill="rgb(222,201,40)" fg:x="177472" fg:w="2581"/><text x="64.3851%" y="223.50"></text></g><g><title>[rust_oracle_performance] (179 samples, 0.06%)</title><rect x="65.4183%" y="213" width="0.0647%" height="15" fill="rgb(235,61,29)" fg:x="181023" fg:w="179"/><text x="65.6683%" y="223.50"></text></g><g><title>malloc_consolidate (20,762 samples, 7.50%)</title><rect x="73.8439%" y="181" width="7.5030%" height="15" fill="rgb(219,207,3)" fg:x="204338" fg:w="20762"/><text x="74.0939%" y="191.50">malloc_con..</text></g><g><title>unlink_chunk.constprop.0 (855 samples, 0.31%)</title><rect x="81.0380%" y="165" width="0.3090%" height="15" fill="rgb(222,56,46)" fg:x="224245" fg:w="855"/><text x="81.2880%" y="175.50"></text></g><g><title>__GI___libc_free (44,148 samples, 15.95%)</title><rect x="65.4830%" y="213" width="15.9543%" height="15" fill="rgb(239,76,54)" fg:x="181202" fg:w="44148"/><text x="65.7330%" y="223.50">__GI___libc_free</text></g><g><title>_int_free (42,271 samples, 15.28%)</title><rect x="66.1613%" y="197" width="15.2760%" height="15" fill="rgb(231,124,27)" fg:x="183079" fg:w="42271"/><text x="66.4113%" y="207.50">_int_free</text></g><g><title>unlink_chunk.constprop.0 (250 samples, 0.09%)</title><rect x="81.3469%" y="181" width="0.0903%" height="15" fill="rgb(249,195,6)" fg:x="225100" fg:w="250"/><text x="81.5969%" y="191.50"></text></g><g><title>dpiGen__release (78,444 samples, 28.35%)</title><rect x="53.3377%" y="261" width="28.3482%" height="15" fill="rgb(237,174,47)" fg:x="147594" fg:w="78444"/><text x="53.5877%" y="271.50">dpiGen__release</text></g><g><title>dpiVar__free (52,470 samples, 18.96%)</title><rect x="62.7242%" y="245" width="18.9617%" height="15" fill="rgb(206,201,31)" fg:x="173568" fg:w="52470"/><text x="62.9742%" y="255.50">dpiVar__free</text></g><g><title>dpiVar__finalizeBuffer (45,985 samples, 16.62%)</title><rect x="65.0678%" y="229" width="16.6181%" height="15" fill="rgb(231,57,52)" fg:x="180053" fg:w="45985"/><text x="65.3178%" y="239.50">dpiVar__finalizeBuffer</text></g><g><title>dpiUtils__freeMemory (685 samples, 0.25%)</title><rect x="81.4384%" y="213" width="0.2475%" height="15" fill="rgb(248,177,22)" fg:x="225353" fg:w="685"/><text x="81.6884%" y="223.50"></text></g><g><title>&lt;oracle::sql_value::SqlValue as core::ops::drop::Drop&gt;::drop (78,803 samples, 28.48%)</title><rect x="53.2224%" y="277" width="28.4779%" height="15" fill="rgb(215,211,37)" fg:x="147275" fg:w="78803"/><text x="53.4724%" y="287.50">&lt;oracle::sql_value::SqlValue as core::ops::dro..</text></g><g><title>dpiVar_release (40 samples, 0.01%)</title><rect x="81.6859%" y="261" width="0.0145%" height="15" fill="rgb(241,128,51)" fg:x="226038" fg:w="40"/><text x="81.9359%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;oracle::connection::InnerConn&gt;&gt; (1,851 samples, 0.67%)</title><rect x="81.7004%" y="277" width="0.6689%" height="15" fill="rgb(227,165,31)" fg:x="226078" fg:w="1851"/><text x="81.9504%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,851 samples, 0.67%)</title><rect x="81.7004%" y="261" width="0.6689%" height="15" fill="rgb(228,167,24)" fg:x="226078" fg:w="1851"/><text x="81.9504%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (52 samples, 0.02%)</title><rect x="82.3505%" y="245" width="0.0188%" height="15" fill="rgb(228,143,12)" fg:x="227877" fg:w="52"/><text x="82.6005%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (52 samples, 0.02%)</title><rect x="82.3505%" y="229" width="0.0188%" height="15" fill="rgb(249,149,8)" fg:x="227877" fg:w="52"/><text x="82.6005%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (66 samples, 0.02%)</title><rect x="82.3693%" y="277" width="0.0239%" height="15" fill="rgb(243,35,44)" fg:x="227929" fg:w="66"/><text x="82.6193%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (66 samples, 0.02%)</title><rect x="82.3693%" y="261" width="0.0239%" height="15" fill="rgb(246,89,9)" fg:x="227929" fg:w="66"/><text x="82.6193%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.02%)</title><rect x="82.3693%" y="245" width="0.0239%" height="15" fill="rgb(233,213,13)" fg:x="227929" fg:w="66"/><text x="82.6193%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (44 samples, 0.02%)</title><rect x="82.3772%" y="229" width="0.0159%" height="15" fill="rgb(233,141,41)" fg:x="227951" fg:w="44"/><text x="82.6272%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;oracle::sql_type::oracle_type::OracleType&gt;&gt; (45 samples, 0.02%)</title><rect x="82.3931%" y="277" width="0.0163%" height="15" fill="rgb(239,167,4)" fg:x="227995" fg:w="45"/><text x="82.6431%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;oracle::sql_type::oracle_type::NativeType&gt; (40 samples, 0.01%)</title><rect x="82.4094%" y="277" width="0.0145%" height="15" fill="rgb(209,217,16)" fg:x="228040" fg:w="40"/><text x="82.6594%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;oracle::sql_value::SqlValue&gt; (81,055 samples, 29.29%)</title><rect x="53.1465%" y="293" width="29.2918%" height="15" fill="rgb(219,88,35)" fg:x="147065" fg:w="81055"/><text x="53.3965%" y="303.50">core::ptr::drop_in_place&lt;oracle::sql_value::Sql..</text></g><g><title>core::ptr::drop_in_place&lt;oracle::sql_value::BufferRowIndex&gt; (40 samples, 0.01%)</title><rect x="82.4239%" y="277" width="0.0145%" height="15" fill="rgb(220,193,23)" fg:x="228080" fg:w="40"/><text x="82.6739%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81,192 samples, 29.34%)</title><rect x="53.0978%" y="325" width="29.3413%" height="15" fill="rgb(230,90,52)" fg:x="146930" fg:w="81192"/><text x="53.3478%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;..</text></g><g><title>core::ptr::drop_in_place&lt;[oracle::sql_value::SqlValue]&gt; (81,190 samples, 29.34%)</title><rect x="53.0985%" y="309" width="29.3406%" height="15" fill="rgb(252,106,19)" fg:x="146932" fg:w="81190"/><text x="53.3485%" y="319.50">core::ptr::drop_in_place&lt;[oracle::sql_value::Sq..</text></g><g><title>__GI___libc_free (224 samples, 0.08%)</title><rect x="82.4401%" y="261" width="0.0809%" height="15" fill="rgb(206,74,20)" fg:x="228125" fg:w="224"/><text x="82.6901%" y="271.50"></text></g><g><title>_int_free (180 samples, 0.07%)</title><rect x="82.4560%" y="245" width="0.0650%" height="15" fill="rgb(230,138,44)" fg:x="228169" fg:w="180"/><text x="82.7060%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (231 samples, 0.08%)</title><rect x="82.4390%" y="293" width="0.0835%" height="15" fill="rgb(235,182,43)" fg:x="228122" fg:w="231"/><text x="82.6890%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (229 samples, 0.08%)</title><rect x="82.4398%" y="277" width="0.0828%" height="15" fill="rgb(242,16,51)" fg:x="228124" fg:w="229"/><text x="82.6898%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;oracle::row::Row&gt; (81,489 samples, 29.45%)</title><rect x="53.0743%" y="357" width="29.4486%" height="15" fill="rgb(248,9,4)" fg:x="146865" fg:w="81489"/><text x="53.3243%" y="367.50">core::ptr::drop_in_place&lt;oracle::row::Row&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;oracle::sql_value::SqlValue&gt;&gt; (81,424 samples, 29.43%)</title><rect x="53.0978%" y="341" width="29.4251%" height="15" fill="rgb(210,31,22)" fg:x="146930" fg:w="81424"/><text x="53.3478%" y="351.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;oracle..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;oracle::sql_value::SqlValue&gt;&gt; (232 samples, 0.08%)</title><rect x="82.4390%" y="325" width="0.0838%" height="15" fill="rgb(239,54,39)" fg:x="228122" fg:w="232"/><text x="82.6890%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (232 samples, 0.08%)</title><rect x="82.4390%" y="309" width="0.0838%" height="15" fill="rgb(230,99,41)" fg:x="228122" fg:w="232"/><text x="82.6890%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (163 samples, 0.06%)</title><rect x="82.5232%" y="357" width="0.0589%" height="15" fill="rgb(253,106,12)" fg:x="228355" fg:w="163"/><text x="82.7732%" y="367.50"></text></g><g><title>dpiData_getBytes (68 samples, 0.02%)</title><rect x="82.9403%" y="293" width="0.0246%" height="15" fill="rgb(213,46,41)" fg:x="229509" fg:w="68"/><text x="83.1903%" y="303.50"></text></g><g><title>oracle::sql_value::SqlValue::buffer_row_index (109 samples, 0.04%)</title><rect x="82.9919%" y="245" width="0.0394%" height="15" fill="rgb(215,133,35)" fg:x="229652" fg:w="109"/><text x="83.2419%" y="255.50"></text></g><g><title>oracle::sql_value::SqlValue::check_not_null (202 samples, 0.07%)</title><rect x="82.9648%" y="293" width="0.0730%" height="15" fill="rgb(213,28,5)" fg:x="229577" fg:w="202"/><text x="83.2148%" y="303.50"></text></g><g><title>oracle::sql_value::SqlValue::is_null (191 samples, 0.07%)</title><rect x="82.9688%" y="277" width="0.0690%" height="15" fill="rgb(215,77,49)" fg:x="229588" fg:w="191"/><text x="83.2188%" y="287.50"></text></g><g><title>oracle::sql_value::SqlValue::data (153 samples, 0.06%)</title><rect x="82.9826%" y="261" width="0.0553%" height="15" fill="rgb(248,100,22)" fg:x="229626" fg:w="153"/><text x="83.2326%" y="271.50"></text></g><g><title>oracle::sql_value::SqlValue::data (74 samples, 0.03%)</title><rect x="83.0378%" y="293" width="0.0267%" height="15" fill="rgb(208,67,9)" fg:x="229779" fg:w="74"/><text x="83.2878%" y="303.50"></text></g><g><title>oracle::sql_value::SqlValue::get_string_unchecked (52 samples, 0.02%)</title><rect x="83.0458%" y="277" width="0.0188%" height="15" fill="rgb(219,133,21)" fg:x="229801" fg:w="52"/><text x="83.2958%" y="287.50"></text></g><g><title>__GI___libc_malloc (814 samples, 0.29%)</title><rect x="83.2012%" y="69" width="0.2942%" height="15" fill="rgb(246,46,29)" fg:x="230231" fg:w="814"/><text x="83.4512%" y="79.50"></text></g><g><title>__rdl_alloc (161 samples, 0.06%)</title><rect x="83.4954%" y="69" width="0.0582%" height="15" fill="rgb(246,185,52)" fg:x="231045" fg:w="161"/><text x="83.7454%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (152 samples, 0.05%)</title><rect x="83.4986%" y="53" width="0.0549%" height="15" fill="rgb(252,136,11)" fg:x="231054" fg:w="152"/><text x="83.7486%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,117 samples, 0.40%)</title><rect x="83.1640%" y="165" width="0.4037%" height="15" fill="rgb(219,138,53)" fg:x="230128" fg:w="1117"/><text x="83.4140%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,117 samples, 0.40%)</title><rect x="83.1640%" y="149" width="0.4037%" height="15" fill="rgb(211,51,23)" fg:x="230128" fg:w="1117"/><text x="83.4140%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,117 samples, 0.40%)</title><rect x="83.1640%" y="133" width="0.4037%" height="15" fill="rgb(247,221,28)" fg:x="230128" fg:w="1117"/><text x="83.4140%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,117 samples, 0.40%)</title><rect x="83.1640%" y="117" width="0.4037%" height="15" fill="rgb(251,222,45)" fg:x="230128" fg:w="1117"/><text x="83.4140%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,117 samples, 0.40%)</title><rect x="83.1640%" y="101" width="0.4037%" height="15" fill="rgb(217,162,53)" fg:x="230128" fg:w="1117"/><text x="83.4140%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1,073 samples, 0.39%)</title><rect x="83.1799%" y="85" width="0.3878%" height="15" fill="rgb(229,93,14)" fg:x="230172" fg:w="1073"/><text x="83.4299%" y="95.50"></text></g><g><title>__rust_alloc (39 samples, 0.01%)</title><rect x="83.5535%" y="69" width="0.0141%" height="15" fill="rgb(209,67,49)" fg:x="231206" fg:w="39"/><text x="83.8035%" y="79.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (1,688 samples, 0.61%)</title><rect x="83.0816%" y="277" width="0.6100%" height="15" fill="rgb(213,87,29)" fg:x="229900" fg:w="1688"/><text x="83.3316%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,460 samples, 0.53%)</title><rect x="83.1640%" y="261" width="0.5276%" height="15" fill="rgb(205,151,52)" fg:x="230128" fg:w="1460"/><text x="83.4140%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,460 samples, 0.53%)</title><rect x="83.1640%" y="245" width="0.5276%" height="15" fill="rgb(253,215,39)" fg:x="230128" fg:w="1460"/><text x="83.4140%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,460 samples, 0.53%)</title><rect x="83.1640%" y="229" width="0.5276%" height="15" fill="rgb(221,220,41)" fg:x="230128" fg:w="1460"/><text x="83.4140%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,460 samples, 0.53%)</title><rect x="83.1640%" y="213" width="0.5276%" height="15" fill="rgb(218,133,21)" fg:x="230128" fg:w="1460"/><text x="83.4140%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1,460 samples, 0.53%)</title><rect x="83.1640%" y="197" width="0.5276%" height="15" fill="rgb(221,193,43)" fg:x="230128" fg:w="1460"/><text x="83.4140%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,460 samples, 0.53%)</title><rect x="83.1640%" y="181" width="0.5276%" height="15" fill="rgb(240,128,52)" fg:x="230128" fg:w="1460"/><text x="83.4140%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (343 samples, 0.12%)</title><rect x="83.5676%" y="165" width="0.1240%" height="15" fill="rgb(253,114,12)" fg:x="231245" fg:w="343"/><text x="83.8176%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (343 samples, 0.12%)</title><rect x="83.5676%" y="149" width="0.1240%" height="15" fill="rgb(215,223,47)" fg:x="231245" fg:w="343"/><text x="83.8176%" y="159.50"></text></g><g><title>__memcpy_ssse3 (302 samples, 0.11%)</title><rect x="83.5824%" y="133" width="0.1091%" height="15" fill="rgb(248,225,23)" fg:x="231286" fg:w="302"/><text x="83.8324%" y="143.50"></text></g><g><title>&lt;core::str::lossy::Utf8LossyChunksIter as core::iter::traits::iterator::Iterator&gt;::next (2,806 samples, 1.01%)</title><rect x="83.9576%" y="261" width="1.0140%" height="15" fill="rgb(250,108,0)" fg:x="232324" fg:w="2806"/><text x="84.2076%" y="271.50"></text></g><g><title>core::str::lossy::Utf8Lossy::chunks (57 samples, 0.02%)</title><rect x="84.9716%" y="261" width="0.0206%" height="15" fill="rgb(228,208,7)" fg:x="235130" fg:w="57"/><text x="85.2216%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (3,703 samples, 1.34%)</title><rect x="83.6916%" y="277" width="1.3382%" height="15" fill="rgb(244,45,10)" fg:x="231588" fg:w="3703"/><text x="83.9416%" y="287.50"></text></g><g><title>core::str::lossy::Utf8Lossy::from_bytes (104 samples, 0.04%)</title><rect x="84.9922%" y="261" width="0.0376%" height="15" fill="rgb(207,125,25)" fg:x="235187" fg:w="104"/><text x="85.2422%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (33 samples, 0.01%)</title><rect x="85.0298%" y="277" width="0.0119%" height="15" fill="rgb(210,195,18)" fg:x="235291" fg:w="33"/><text x="85.2798%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (33 samples, 0.01%)</title><rect x="85.0298%" y="261" width="0.0119%" height="15" fill="rgb(249,80,12)" fg:x="235291" fg:w="33"/><text x="85.2798%" y="271.50"></text></g><g><title>&lt;alloc::string::String as oracle::sql_type::FromSql&gt;::from_sql (7,131 samples, 2.58%)</title><rect x="82.6298%" y="341" width="2.5770%" height="15" fill="rgb(221,65,9)" fg:x="228650" fg:w="7131"/><text x="82.8798%" y="351.50">&lt;a..</text></g><g><title>oracle::sql_value::SqlValue::to_string (7,048 samples, 2.55%)</title><rect x="82.6598%" y="325" width="2.5470%" height="15" fill="rgb(235,49,36)" fg:x="228733" fg:w="7048"/><text x="82.9098%" y="335.50">or..</text></g><g><title>oracle::sql_value::SqlValue::get_string_unchecked (6,609 samples, 2.39%)</title><rect x="82.8185%" y="309" width="2.3884%" height="15" fill="rgb(225,32,20)" fg:x="229172" fg:w="6609"/><text x="83.0685%" y="319.50">or..</text></g><g><title>oracle::to_rust_str (5,928 samples, 2.14%)</title><rect x="83.0646%" y="293" width="2.1423%" height="15" fill="rgb(215,141,46)" fg:x="229853" fg:w="5928"/><text x="83.3146%" y="303.50">o..</text></g><g><title>oracle::sql_value::SqlValue::get_string_unchecked (457 samples, 0.17%)</title><rect x="85.0417%" y="277" width="0.1652%" height="15" fill="rgb(250,160,47)" fg:x="235324" fg:w="457"/><text x="85.2917%" y="287.50"></text></g><g><title>__GI___libc_free (78 samples, 0.03%)</title><rect x="85.2368%" y="309" width="0.0282%" height="15" fill="rgb(216,222,40)" fg:x="235864" fg:w="78"/><text x="85.4868%" y="319.50"></text></g><g><title>_int_free (53 samples, 0.02%)</title><rect x="85.2459%" y="293" width="0.0192%" height="15" fill="rgb(234,217,39)" fg:x="235889" fg:w="53"/><text x="85.4959%" y="303.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (29 samples, 0.01%)</title><rect x="85.2950%" y="229" width="0.0105%" height="15" fill="rgb(207,178,40)" fg:x="236025" fg:w="29"/><text x="85.5450%" y="239.50"></text></g><g><title>core::num::dec2flt::num::from_str_unchecked (42 samples, 0.02%)</title><rect x="85.3070%" y="229" width="0.0152%" height="15" fill="rgb(221,136,13)" fg:x="236058" fg:w="42"/><text x="85.5570%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.01%)</title><rect x="85.3106%" y="213" width="0.0116%" height="15" fill="rgb(249,199,10)" fg:x="236068" fg:w="32"/><text x="85.5606%" y="223.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (88 samples, 0.03%)</title><rect x="85.2914%" y="245" width="0.0318%" height="15" fill="rgb(249,222,13)" fg:x="236015" fg:w="88"/><text x="85.5414%" y="255.50"></text></g><g><title>core::num::dec2flt::dec2flt (37 samples, 0.01%)</title><rect x="85.3232%" y="245" width="0.0134%" height="15" fill="rgb(244,185,38)" fg:x="236103" fg:w="37"/><text x="85.5732%" y="255.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (29 samples, 0.01%)</title><rect x="85.3261%" y="229" width="0.0105%" height="15" fill="rgb(236,202,9)" fg:x="236111" fg:w="29"/><text x="85.5761%" y="239.50"></text></g><g><title>core::num::dec2flt::simplify (49 samples, 0.02%)</title><rect x="85.3366%" y="245" width="0.0177%" height="15" fill="rgb(250,229,37)" fg:x="236140" fg:w="49"/><text x="85.5866%" y="255.50"></text></g><g><title>core::num::dec2flt::convert (179 samples, 0.06%)</title><rect x="85.2903%" y="261" width="0.0647%" height="15" fill="rgb(206,174,23)" fg:x="236012" fg:w="179"/><text x="85.5403%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (61 samples, 0.02%)</title><rect x="85.3637%" y="261" width="0.0220%" height="15" fill="rgb(211,33,43)" fg:x="236215" fg:w="61"/><text x="85.6137%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (328 samples, 0.12%)</title><rect x="85.2676%" y="309" width="0.1185%" height="15" fill="rgb(245,58,50)" fg:x="235949" fg:w="328"/><text x="85.5176%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (328 samples, 0.12%)</title><rect x="85.2676%" y="293" width="0.1185%" height="15" fill="rgb(244,68,36)" fg:x="235949" fg:w="328"/><text x="85.5176%" y="303.50"></text></g><g><title>core::num::dec2flt::dec2flt (326 samples, 0.12%)</title><rect x="85.2683%" y="277" width="0.1178%" height="15" fill="rgb(232,229,15)" fg:x="235951" fg:w="326"/><text x="85.5183%" y="287.50"></text></g><g><title>__GI___libc_malloc (354 samples, 0.13%)</title><rect x="85.4125%" y="53" width="0.1279%" height="15" fill="rgb(254,30,23)" fg:x="236350" fg:w="354"/><text x="85.6625%" y="63.50"></text></g><g><title>_int_malloc (216 samples, 0.08%)</title><rect x="85.4624%" y="37" width="0.0781%" height="15" fill="rgb(235,160,14)" fg:x="236488" fg:w="216"/><text x="85.7124%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (397 samples, 0.14%)</title><rect x="85.4100%" y="149" width="0.1435%" height="15" fill="rgb(212,155,44)" fg:x="236343" fg:w="397"/><text x="85.6600%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (397 samples, 0.14%)</title><rect x="85.4100%" y="133" width="0.1435%" height="15" fill="rgb(226,2,50)" fg:x="236343" fg:w="397"/><text x="85.6600%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (397 samples, 0.14%)</title><rect x="85.4100%" y="117" width="0.1435%" height="15" fill="rgb(234,177,6)" fg:x="236343" fg:w="397"/><text x="85.6600%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (397 samples, 0.14%)</title><rect x="85.4100%" y="101" width="0.1435%" height="15" fill="rgb(217,24,9)" fg:x="236343" fg:w="397"/><text x="85.6600%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (397 samples, 0.14%)</title><rect x="85.4100%" y="85" width="0.1435%" height="15" fill="rgb(220,13,46)" fg:x="236343" fg:w="397"/><text x="85.6600%" y="95.50"></text></g><g><title>alloc::alloc::alloc (393 samples, 0.14%)</title><rect x="85.4114%" y="69" width="0.1420%" height="15" fill="rgb(239,221,27)" fg:x="236347" fg:w="393"/><text x="85.6614%" y="79.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (417 samples, 0.15%)</title><rect x="85.4074%" y="261" width="0.1507%" height="15" fill="rgb(222,198,25)" fg:x="236336" fg:w="417"/><text x="85.6574%" y="271.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (410 samples, 0.15%)</title><rect x="85.4100%" y="245" width="0.1482%" height="15" fill="rgb(211,99,13)" fg:x="236343" fg:w="410"/><text x="85.6600%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (410 samples, 0.15%)</title><rect x="85.4100%" y="229" width="0.1482%" height="15" fill="rgb(232,111,31)" fg:x="236343" fg:w="410"/><text x="85.6600%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (410 samples, 0.15%)</title><rect x="85.4100%" y="213" width="0.1482%" height="15" fill="rgb(245,82,37)" fg:x="236343" fg:w="410"/><text x="85.6600%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (410 samples, 0.15%)</title><rect x="85.4100%" y="197" width="0.1482%" height="15" fill="rgb(227,149,46)" fg:x="236343" fg:w="410"/><text x="85.6600%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (410 samples, 0.15%)</title><rect x="85.4100%" y="181" width="0.1482%" height="15" fill="rgb(218,36,50)" fg:x="236343" fg:w="410"/><text x="85.6600%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (410 samples, 0.15%)</title><rect x="85.4100%" y="165" width="0.1482%" height="15" fill="rgb(226,80,48)" fg:x="236343" fg:w="410"/><text x="85.6600%" y="175.50"></text></g><g><title>&lt;core::str::lossy::Utf8LossyChunksIter as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.03%)</title><rect x="85.5740%" y="245" width="0.0325%" height="15" fill="rgb(238,224,15)" fg:x="236797" fg:w="90"/><text x="85.8240%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (166 samples, 0.06%)</title><rect x="85.5581%" y="261" width="0.0600%" height="15" fill="rgb(241,136,10)" fg:x="236753" fg:w="166"/><text x="85.8081%" y="271.50"></text></g><g><title>oracle::sql_value::SqlValue::get_string (663 samples, 0.24%)</title><rect x="85.3861%" y="309" width="0.2396%" height="15" fill="rgb(208,32,45)" fg:x="236277" fg:w="663"/><text x="85.6361%" y="319.50"></text></g><g><title>oracle::sql_value::SqlValue::get_string_unchecked (654 samples, 0.24%)</title><rect x="85.3894%" y="293" width="0.2363%" height="15" fill="rgb(207,135,9)" fg:x="236286" fg:w="654"/><text x="85.6394%" y="303.50"></text></g><g><title>oracle::to_rust_str (605 samples, 0.22%)</title><rect x="85.4071%" y="277" width="0.2186%" height="15" fill="rgb(206,86,44)" fg:x="236335" fg:w="605"/><text x="85.6571%" y="287.50"></text></g><g><title>&lt;f32 as oracle::sql_type::FromSql&gt;::from_sql (1,161 samples, 0.42%)</title><rect x="85.2069%" y="341" width="0.4196%" height="15" fill="rgb(245,177,15)" fg:x="235781" fg:w="1161"/><text x="85.4569%" y="351.50"></text></g><g><title>oracle::sql_value::SqlValue::to_f32 (1,134 samples, 0.41%)</title><rect x="85.2166%" y="325" width="0.4098%" height="15" fill="rgb(206,64,50)" fg:x="235808" fg:w="1134"/><text x="85.4666%" y="335.50"></text></g><g><title>oracle::sql_value::SqlValue::get (8,411 samples, 3.04%)</title><rect x="82.5872%" y="357" width="3.0396%" height="15" fill="rgb(234,36,40)" fg:x="228532" fg:w="8411"/><text x="82.8372%" y="367.50">ora..</text></g><g><title>oracle::sql_value::SqlValue::buffer_row_index (52 samples, 0.02%)</title><rect x="85.8902%" y="325" width="0.0188%" height="15" fill="rgb(213,64,8)" fg:x="237672" fg:w="52"/><text x="86.1402%" y="335.50"></text></g><g><title>oracle::sql_value::SqlValue::is_null (848 samples, 0.31%)</title><rect x="85.6268%" y="357" width="0.3065%" height="15" fill="rgb(210,75,36)" fg:x="236943" fg:w="848"/><text x="85.8768%" y="367.50"></text></g><g><title>oracle::sql_value::SqlValue::data (297 samples, 0.11%)</title><rect x="85.8259%" y="341" width="0.1073%" height="15" fill="rgb(229,88,21)" fg:x="237494" fg:w="297"/><text x="86.0759%" y="351.50"></text></g><g><title>oracle::sql_value::SqlValue::is_null (67 samples, 0.02%)</title><rect x="85.9090%" y="325" width="0.0242%" height="15" fill="rgb(252,204,47)" fg:x="237724" fg:w="67"/><text x="86.1590%" y="335.50"></text></g><g><title>oracle::sql_value::SqlValue::oracle_type (115 samples, 0.04%)</title><rect x="85.9332%" y="357" width="0.0416%" height="15" fill="rgb(208,77,27)" fg:x="237791" fg:w="115"/><text x="86.1832%" y="367.50"></text></g><g><title>__GI___clone (237,413 samples, 85.80%)</title><rect x="0.1796%" y="1253" width="85.7966%" height="15" fill="rgb(221,76,26)" fg:x="497" fg:w="237413"/><text x="0.4296%" y="1263.50">__GI___clone</text></g><g><title>start_thread (237,413 samples, 85.80%)</title><rect x="0.1796%" y="1237" width="85.7966%" height="15" fill="rgb(225,139,18)" fg:x="497" fg:w="237413"/><text x="0.4296%" y="1247.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1221" width="85.7963%" height="15" fill="rgb(230,137,11)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1231.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1205" width="85.7963%" height="15" fill="rgb(212,28,1)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1215.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1189" width="85.7963%" height="15" fill="rgb(248,164,17)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1199.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1173" width="85.7963%" height="15" fill="rgb(222,171,42)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1183.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1157" width="85.7963%" height="15" fill="rgb(243,84,45)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1167.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1141" width="85.7963%" height="15" fill="rgb(252,49,23)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1151.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1125" width="85.7963%" height="15" fill="rgb(215,19,7)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1135.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1109" width="85.7963%" height="15" fill="rgb(238,81,41)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1119.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1093" width="85.7963%" height="15" fill="rgb(210,199,37)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1103.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1077" width="85.7963%" height="15" fill="rgb(244,192,49)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1087.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1061" width="85.7963%" height="15" fill="rgb(226,211,11)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1071.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1045" width="85.7963%" height="15" fill="rgb(236,162,54)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1055.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1029" width="85.7963%" height="15" fill="rgb(220,229,9)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1039.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (237,412 samples, 85.80%)</title><rect x="0.1800%" y="1013" width="85.7963%" height="15" fill="rgb(250,87,22)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1023.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="997" width="85.7963%" height="15" fill="rgb(239,43,17)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="1007.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="981" width="85.7963%" height="15" fill="rgb(231,177,25)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="991.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (237,412 samples, 85.80%)</title><rect x="0.1800%" y="965" width="85.7963%" height="15" fill="rgb(219,179,1)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="975.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (237,412 samples, 85.80%)</title><rect x="0.1800%" y="949" width="85.7963%" height="15" fill="rgb(238,219,53)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="959.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (237,412 samples, 85.80%)</title><rect x="0.1800%" y="933" width="85.7963%" height="15" fill="rgb(232,167,36)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (237,412 samples, 85.80%)</title><rect x="0.1800%" y="917" width="85.7963%" height="15" fill="rgb(244,19,51)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (237,412 samples, 85.80%)</title><rect x="0.1800%" y="901" width="85.7963%" height="15" fill="rgb(224,6,22)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="911.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (237,412 samples, 85.80%)</title><rect x="0.1800%" y="885" width="85.7963%" height="15" fill="rgb(224,145,5)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="895.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="869" width="85.7963%" height="15" fill="rgb(234,130,49)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="879.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="853" width="85.7963%" height="15" fill="rgb(254,6,2)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="863.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (237,412 samples, 85.80%)</title><rect x="0.1800%" y="837" width="85.7963%" height="15" fill="rgb(208,96,46)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="847.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="821" width="85.7963%" height="15" fill="rgb(239,3,39)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="831.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="805" width="85.7963%" height="15" fill="rgb(233,210,1)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="815.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="789" width="85.7963%" height="15" fill="rgb(244,137,37)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="799.50">tokio::runtime::thread_pool::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::run (237,412 samples, 85.80%)</title><rect x="0.1800%" y="773" width="85.7963%" height="15" fill="rgb(240,136,2)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="783.50">tokio::runtime::thread_pool::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (237,412 samples, 85.80%)</title><rect x="0.1800%" y="757" width="85.7963%" height="15" fill="rgb(239,18,37)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="767.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="741" width="85.7963%" height="15" fill="rgb(218,185,22)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="751.50">tokio::runtime::thread_pool::worker::run::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (237,412 samples, 85.80%)</title><rect x="0.1800%" y="725" width="85.7963%" height="15" fill="rgb(225,218,4)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="735.50">tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (237,412 samples, 85.80%)</title><rect x="0.1800%" y="709" width="85.7963%" height="15" fill="rgb(230,182,32)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="719.50">tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>tokio::coop::budget (237,412 samples, 85.80%)</title><rect x="0.1800%" y="693" width="85.7963%" height="15" fill="rgb(242,56,43)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="703.50">tokio::coop::budget</text></g><g><title>tokio::coop::with_budget (237,412 samples, 85.80%)</title><rect x="0.1800%" y="677" width="85.7963%" height="15" fill="rgb(233,99,24)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="687.50">tokio::coop::with_budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (237,412 samples, 85.80%)</title><rect x="0.1800%" y="661" width="85.7963%" height="15" fill="rgb(234,209,42)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="671.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (237,412 samples, 85.80%)</title><rect x="0.1800%" y="645" width="85.7963%" height="15" fill="rgb(227,7,12)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="655.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::coop::with_budget::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="629" width="85.7963%" height="15" fill="rgb(245,203,43)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="639.50">tokio::coop::with_budget::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="613" width="85.7963%" height="15" fill="rgb(238,205,33)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="623.50">tokio::runtime::thread_pool::worker::Context::run_task::{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (237,412 samples, 85.80%)</title><rect x="0.1800%" y="597" width="85.7963%" height="15" fill="rgb(231,56,7)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="607.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="581" width="85.7963%" height="15" fill="rgb(244,186,29)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="591.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="565" width="85.7963%" height="15" fill="rgb(234,111,31)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="575.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (237,412 samples, 85.80%)</title><rect x="0.1800%" y="549" width="85.7963%" height="15" fill="rgb(241,149,10)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="559.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (237,412 samples, 85.80%)</title><rect x="0.1800%" y="533" width="85.7963%" height="15" fill="rgb(249,206,44)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="543.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (237,412 samples, 85.80%)</title><rect x="0.1800%" y="517" width="85.7963%" height="15" fill="rgb(251,153,30)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (237,412 samples, 85.80%)</title><rect x="0.1800%" y="501" width="85.7963%" height="15" fill="rgb(239,152,38)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (237,412 samples, 85.80%)</title><rect x="0.1800%" y="485" width="85.7963%" height="15" fill="rgb(249,139,47)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="495.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (237,412 samples, 85.80%)</title><rect x="0.1800%" y="469" width="85.7963%" height="15" fill="rgb(244,64,35)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="479.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="453" width="85.7963%" height="15" fill="rgb(216,46,15)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="463.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="437" width="85.7963%" height="15" fill="rgb(250,74,19)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="447.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (237,412 samples, 85.80%)</title><rect x="0.1800%" y="421" width="85.7963%" height="15" fill="rgb(249,42,33)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="431.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (237,412 samples, 85.80%)</title><rect x="0.1800%" y="405" width="85.7963%" height="15" fill="rgb(242,149,17)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="415.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (237,412 samples, 85.80%)</title><rect x="0.1800%" y="389" width="85.7963%" height="15" fill="rgb(244,29,21)" fg:x="498" fg:w="237412"/><text x="0.4300%" y="399.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rust_oracle_performance::process_table_part::{{closure}} (235,830 samples, 85.22%)</title><rect x="0.7517%" y="373" width="85.2246%" height="15" fill="rgb(220,130,37)" fg:x="2080" fg:w="235830"/><text x="1.0017%" y="383.50">rust_oracle_performance::process_table_part::{{closure}}</text></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.01%)</title><rect x="85.9817%" y="1253" width="0.0116%" height="15" fill="rgb(211,67,2)" fg:x="237925" fg:w="32"/><text x="86.2317%" y="1263.50"></text></g><g><title>[unknown] (32 samples, 0.01%)</title><rect x="85.9817%" y="1237" width="0.0116%" height="15" fill="rgb(235,68,52)" fg:x="237925" fg:w="32"/><text x="86.2317%" y="1247.50"></text></g><g><title>_int_malloc (60 samples, 0.02%)</title><rect x="86.0048%" y="1253" width="0.0217%" height="15" fill="rgb(246,142,3)" fg:x="237989" fg:w="60"/><text x="86.2548%" y="1263.50"></text></g><g><title>[unknown] (60 samples, 0.02%)</title><rect x="86.0048%" y="1237" width="0.0217%" height="15" fill="rgb(241,25,7)" fg:x="237989" fg:w="60"/><text x="86.2548%" y="1247.50"></text></g><g><title>dpiGen__endPublicFn (29 samples, 0.01%)</title><rect x="86.0304%" y="1237" width="0.0105%" height="15" fill="rgb(242,119,39)" fg:x="238060" fg:w="29"/><text x="86.2804%" y="1247.50"></text></g><g><title>dpiConn_newVar (75 samples, 0.03%)</title><rect x="86.0283%" y="1253" width="0.0271%" height="15" fill="rgb(241,98,45)" fg:x="238054" fg:w="75"/><text x="86.2783%" y="1263.50"></text></g><g><title>dpiVar__allocate (40 samples, 0.01%)</title><rect x="86.0409%" y="1237" width="0.0145%" height="15" fill="rgb(254,28,30)" fg:x="238089" fg:w="40"/><text x="86.2909%" y="1247.50"></text></g><g><title>dpiGen__allocate (45 samples, 0.02%)</title><rect x="86.0554%" y="1253" width="0.0163%" height="15" fill="rgb(241,142,54)" fg:x="238129" fg:w="45"/><text x="86.3054%" y="1263.50"></text></g><g><title>dpiUtils__allocateMemory (45 samples, 0.02%)</title><rect x="86.0554%" y="1237" width="0.0163%" height="15" fill="rgb(222,85,15)" fg:x="238129" fg:w="45"/><text x="86.3054%" y="1247.50"></text></g><g><title>__GI___libc_free (42 samples, 0.02%)</title><rect x="86.0745%" y="1237" width="0.0152%" height="15" fill="rgb(210,85,47)" fg:x="238182" fg:w="42"/><text x="86.3245%" y="1247.50"></text></g><g><title>dpiGen__release (49 samples, 0.02%)</title><rect x="86.0727%" y="1253" width="0.0177%" height="15" fill="rgb(224,206,25)" fg:x="238177" fg:w="49"/><text x="86.3227%" y="1263.50"></text></g><g><title>dpiOci__threadKeyGet (91 samples, 0.03%)</title><rect x="86.0948%" y="1221" width="0.0329%" height="15" fill="rgb(243,201,19)" fg:x="238238" fg:w="91"/><text x="86.3448%" y="1231.50"></text></g><g><title>dpiGlobal__initError (101 samples, 0.04%)</title><rect x="86.0915%" y="1253" width="0.0365%" height="15" fill="rgb(236,59,4)" fg:x="238229" fg:w="101"/><text x="86.3415%" y="1263.50"></text></g><g><title>dpiGlobal__getErrorBuffer (97 samples, 0.04%)</title><rect x="86.0930%" y="1237" width="0.0351%" height="15" fill="rgb(254,179,45)" fg:x="238233" fg:w="97"/><text x="86.3430%" y="1247.50"></text></g><g><title>dpiStmt__fetch (40 samples, 0.01%)</title><rect x="86.1287%" y="1253" width="0.0145%" height="15" fill="rgb(226,14,10)" fg:x="238332" fg:w="40"/><text x="86.3787%" y="1263.50"></text></g><g><title>dpiStmt__postFetch (39 samples, 0.01%)</title><rect x="86.1291%" y="1237" width="0.0141%" height="15" fill="rgb(244,27,41)" fg:x="238333" fg:w="39"/><text x="86.3791%" y="1247.50"></text></g><g><title>dpiVar__getValue (36 samples, 0.01%)</title><rect x="86.1302%" y="1221" width="0.0130%" height="15" fill="rgb(235,35,32)" fg:x="238336" fg:w="36"/><text x="86.3802%" y="1231.50"></text></g><g><title>__GI___libc_malloc (144 samples, 0.05%)</title><rect x="86.1450%" y="1237" width="0.0520%" height="15" fill="rgb(218,68,31)" fg:x="238377" fg:w="144"/><text x="86.3950%" y="1247.50"></text></g><g><title>dpiUtils__allocateMemory (266 samples, 0.10%)</title><rect x="86.1432%" y="1253" width="0.0961%" height="15" fill="rgb(207,120,37)" fg:x="238372" fg:w="266"/><text x="86.3932%" y="1263.50"></text></g><g><title>__calloc (117 samples, 0.04%)</title><rect x="86.1970%" y="1237" width="0.0423%" height="15" fill="rgb(227,98,0)" fg:x="238521" fg:w="117"/><text x="86.4470%" y="1247.50"></text></g><g><title>dpiGen__allocate (34 samples, 0.01%)</title><rect x="86.2408%" y="1237" width="0.0123%" height="15" fill="rgb(207,7,3)" fg:x="238642" fg:w="34"/><text x="86.4908%" y="1247.50"></text></g><g><title>dpiGen__setRefCount (29 samples, 0.01%)</title><rect x="86.2531%" y="1237" width="0.0105%" height="15" fill="rgb(206,98,19)" fg:x="238676" fg:w="29"/><text x="86.5031%" y="1247.50"></text></g><g><title>dpiVar__allocate (66 samples, 0.02%)</title><rect x="86.2404%" y="1253" width="0.0239%" height="15" fill="rgb(217,5,26)" fg:x="238641" fg:w="66"/><text x="86.4904%" y="1263.50"></text></g><g><title>__GI___libc_free (183 samples, 0.07%)</title><rect x="86.2653%" y="1237" width="0.0661%" height="15" fill="rgb(235,190,38)" fg:x="238710" fg:w="183"/><text x="86.5153%" y="1247.50"></text></g><g><title>dpiVar__finalizeBuffer (217 samples, 0.08%)</title><rect x="86.2643%" y="1253" width="0.0784%" height="15" fill="rgb(247,86,24)" fg:x="238707" fg:w="217"/><text x="86.5143%" y="1263.50"></text></g><g><title>dpiUtils__freeMemory (31 samples, 0.01%)</title><rect x="86.3315%" y="1237" width="0.0112%" height="15" fill="rgb(205,101,16)" fg:x="238893" fg:w="31"/><text x="86.5815%" y="1247.50"></text></g><g><title>dpiGen__setRefCount (30 samples, 0.01%)</title><rect x="86.3434%" y="1237" width="0.0108%" height="15" fill="rgb(246,168,33)" fg:x="238926" fg:w="30"/><text x="86.5934%" y="1247.50"></text></g><g><title>dpiVar__free (65 samples, 0.02%)</title><rect x="86.3427%" y="1253" width="0.0235%" height="15" fill="rgb(231,114,1)" fg:x="238924" fg:w="65"/><text x="86.5927%" y="1263.50"></text></g><g><title>dpiVar__finalizeBuffer (33 samples, 0.01%)</title><rect x="86.3542%" y="1237" width="0.0119%" height="15" fill="rgb(207,184,53)" fg:x="238956" fg:w="33"/><text x="86.6042%" y="1247.50"></text></g><g><title>dpiVar__initBuffer (51 samples, 0.02%)</title><rect x="86.3669%" y="1253" width="0.0184%" height="15" fill="rgb(224,95,51)" fg:x="238991" fg:w="51"/><text x="86.6169%" y="1263.50"></text></g><g><title>dpiUtils__allocateMemory (51 samples, 0.02%)</title><rect x="86.3669%" y="1237" width="0.0184%" height="15" fill="rgb(212,188,45)" fg:x="238991" fg:w="51"/><text x="86.6169%" y="1247.50"></text></g><g><title>dpiVar__checkArraySize (48 samples, 0.02%)</title><rect x="86.3853%" y="1237" width="0.0173%" height="15" fill="rgb(223,154,38)" fg:x="239042" fg:w="48"/><text x="86.6353%" y="1247.50"></text></g><g><title>dpiGen__startPublicFn (48 samples, 0.02%)</title><rect x="86.3853%" y="1221" width="0.0173%" height="15" fill="rgb(251,22,52)" fg:x="239042" fg:w="48"/><text x="86.6353%" y="1231.50"></text></g><g><title>dpiVar_copyData (79 samples, 0.03%)</title><rect x="86.3853%" y="1253" width="0.0285%" height="15" fill="rgb(229,209,22)" fg:x="239042" fg:w="79"/><text x="86.6353%" y="1263.50"></text></g><g><title>dpiVar__setFromBytes (31 samples, 0.01%)</title><rect x="86.4027%" y="1237" width="0.0112%" height="15" fill="rgb(234,138,34)" fg:x="239090" fg:w="31"/><text x="86.6527%" y="1247.50"></text></g><g><title>kpufrfs (59 samples, 0.02%)</title><rect x="86.4366%" y="1237" width="0.0213%" height="15" fill="rgb(212,95,11)" fg:x="239184" fg:w="59"/><text x="86.6866%" y="1247.50"></text></g><g><title>kpuhhrsp (32 samples, 0.01%)</title><rect x="86.4464%" y="1221" width="0.0116%" height="15" fill="rgb(240,179,47)" fg:x="239211" fg:w="32"/><text x="86.6964%" y="1231.50"></text></g><g><title>[libclntsh.so.19.1] (29 samples, 0.01%)</title><rect x="86.4475%" y="1205" width="0.0105%" height="15" fill="rgb(240,163,11)" fg:x="239214" fg:w="29"/><text x="86.6975%" y="1215.50"></text></g><g><title>kpufch0 (128 samples, 0.05%)</title><rect x="86.4171%" y="1253" width="0.0463%" height="15" fill="rgb(236,37,12)" fg:x="239130" fg:w="128"/><text x="86.6671%" y="1263.50"></text></g><g><title>oracle::sql_value::SqlValue::dup_by_handle (43 samples, 0.02%)</title><rect x="86.4666%" y="1253" width="0.0155%" height="15" fill="rgb(232,164,16)" fg:x="239267" fg:w="43"/><text x="86.7166%" y="1263.50"></text></g><g><title>snttread (37 samples, 0.01%)</title><rect x="86.5942%" y="1157" width="0.0134%" height="15" fill="rgb(244,205,15)" fg:x="239620" fg:w="37"/><text x="86.8442%" y="1167.50"></text></g><g><title>[libclntsh.so.19.1] (58 samples, 0.02%)</title><rect x="86.5906%" y="1173" width="0.0210%" height="15" fill="rgb(223,117,47)" fg:x="239610" fg:w="58"/><text x="86.8406%" y="1183.50"></text></g><g><title>[libclntsh.so.19.1] (90 samples, 0.03%)</title><rect x="86.5834%" y="1189" width="0.0325%" height="15" fill="rgb(244,107,35)" fg:x="239590" fg:w="90"/><text x="86.8334%" y="1199.50"></text></g><g><title>nioqrc (126 samples, 0.05%)</title><rect x="86.5801%" y="1205" width="0.0455%" height="15" fill="rgb(205,140,8)" fg:x="239581" fg:w="126"/><text x="86.8301%" y="1215.50"></text></g><g><title>ttcdrv (44 samples, 0.02%)</title><rect x="86.6343%" y="1205" width="0.0159%" height="15" fill="rgb(228,84,46)" fg:x="239731" fg:w="44"/><text x="86.8843%" y="1215.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="93.0600%" y="1173" width="0.0148%" height="15" fill="rgb(254,188,9)" fg:x="257512" fg:w="41"/><text x="93.3100%" y="1183.50"></text></g><g><title>_intel_fast_memcpy (710 samples, 0.26%)</title><rect x="93.0767%" y="1173" width="0.2566%" height="15" fill="rgb(206,112,54)" fg:x="257558" fg:w="710"/><text x="93.3267%" y="1183.50"></text></g><g><title>__memcpy_ssse3 (9,555 samples, 3.45%)</title><rect x="94.3028%" y="1157" width="3.4530%" height="15" fill="rgb(216,84,49)" fg:x="260951" fg:w="9555"/><text x="94.5528%" y="1167.50">__m..</text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="97.7439%" y="1141" width="0.0119%" height="15" fill="rgb(214,194,35)" fg:x="270473" fg:w="33"/><text x="97.9939%" y="1151.50"></text></g><g><title>_intel_fast_memcpy.A (37 samples, 0.01%)</title><rect x="97.7558%" y="1157" width="0.0134%" height="15" fill="rgb(249,28,3)" fg:x="270506" fg:w="37"/><text x="98.0058%" y="1167.50"></text></g><g><title>_intel_fast_memcpy.A@plt (32 samples, 0.01%)</title><rect x="97.7692%" y="1157" width="0.0116%" height="15" fill="rgb(222,56,52)" fg:x="270543" fg:w="32"/><text x="98.0192%" y="1167.50"></text></g><g><title>_intel_fast_memcpy@plt (44 samples, 0.02%)</title><rect x="97.7808%" y="1157" width="0.0159%" height="15" fill="rgb(245,217,50)" fg:x="270575" fg:w="44"/><text x="98.0308%" y="1167.50"></text></g><g><title>memcpy@plt (37 samples, 0.01%)</title><rect x="97.7967%" y="1157" width="0.0134%" height="15" fill="rgb(213,201,24)" fg:x="270619" fg:w="37"/><text x="98.0467%" y="1167.50"></text></g><g><title>ttcgcshnd (1,124 samples, 0.41%)</title><rect x="97.8100%" y="1157" width="0.4062%" height="15" fill="rgb(248,116,28)" fg:x="270656" fg:w="1124"/><text x="98.0600%" y="1167.50"></text></g><g><title>kpccc2u (13,573 samples, 4.91%)</title><rect x="93.3332%" y="1173" width="4.9050%" height="15" fill="rgb(219,72,43)" fg:x="258268" fg:w="13573"/><text x="93.5832%" y="1183.50">kpccc2u</text></g><g><title>ttcgcshnd@plt (61 samples, 0.02%)</title><rect x="98.2162%" y="1157" width="0.0220%" height="15" fill="rgb(209,138,14)" fg:x="271780" fg:w="61"/><text x="98.4662%" y="1167.50"></text></g><g><title>__memcpy_ssse3 (46 samples, 0.02%)</title><rect x="98.2553%" y="1157" width="0.0166%" height="15" fill="rgb(222,18,33)" fg:x="271888" fg:w="46"/><text x="98.5053%" y="1167.50"></text></g><g><title>kpccv2n (100 samples, 0.04%)</title><rect x="98.2383%" y="1173" width="0.0361%" height="15" fill="rgb(213,199,7)" fg:x="271841" fg:w="100"/><text x="98.4883%" y="1183.50"></text></g><g><title>__memcpy_ssse3 (373 samples, 0.13%)</title><rect x="98.8895%" y="1157" width="0.1348%" height="15" fill="rgb(250,110,10)" fg:x="273643" fg:w="373"/><text x="99.1395%" y="1167.50"></text></g><g><title>_intel_fast_memcpy (253 samples, 0.09%)</title><rect x="99.0243%" y="1157" width="0.0914%" height="15" fill="rgb(248,123,6)" fg:x="274016" fg:w="253"/><text x="99.2743%" y="1167.50"></text></g><g><title>__memcpy_ssse3 (304 samples, 0.11%)</title><rect x="99.5179%" y="1141" width="0.1099%" height="15" fill="rgb(206,91,31)" fg:x="275382" fg:w="304"/><text x="99.7679%" y="1151.50"></text></g><g><title>memcpy@plt (30 samples, 0.01%)</title><rect x="99.6560%" y="1141" width="0.0108%" height="15" fill="rgb(211,154,13)" fg:x="275764" fg:w="30"/><text x="99.9060%" y="1151.50"></text></g><g><title>__libc_read (42 samples, 0.02%)</title><rect x="99.7113%" y="1077" width="0.0152%" height="15" fill="rgb(225,148,7)" fg:x="275917" fg:w="42"/><text x="99.9613%" y="1087.50"></text></g><g><title>[libclntsh.so.19.1] (79 samples, 0.03%)</title><rect x="99.6982%" y="1109" width="0.0285%" height="15" fill="rgb(220,160,43)" fg:x="275881" fg:w="79"/><text x="99.9482%" y="1119.50"></text></g><g><title>snttread (54 samples, 0.02%)</title><rect x="99.7073%" y="1093" width="0.0195%" height="15" fill="rgb(213,52,39)" fg:x="275906" fg:w="54"/><text x="99.9573%" y="1103.50"></text></g><g><title>__memcpy_ssse3 (33 samples, 0.01%)</title><rect x="99.7268%" y="1109" width="0.0119%" height="15" fill="rgb(243,137,7)" fg:x="275960" fg:w="33"/><text x="99.9768%" y="1119.50"></text></g><g><title>[libclntsh.so.19.1] (164 samples, 0.06%)</title><rect x="99.6805%" y="1125" width="0.0593%" height="15" fill="rgb(230,79,13)" fg:x="275832" fg:w="164"/><text x="99.9305%" y="1135.50"></text></g><g><title>nsbrecv (34 samples, 0.01%)</title><rect x="99.7488%" y="1125" width="0.0123%" height="15" fill="rgb(247,105,23)" fg:x="276021" fg:w="34"/><text x="99.9988%" y="1135.50"></text></g><g><title>nioqrc (304 samples, 0.11%)</title><rect x="99.6668%" y="1141" width="0.1099%" height="15" fill="rgb(223,179,41)" fg:x="275794" fg:w="304"/><text x="99.9168%" y="1151.50"></text></g><g><title>sltskyg (43 samples, 0.02%)</title><rect x="99.7611%" y="1125" width="0.0155%" height="15" fill="rgb(218,9,34)" fg:x="276055" fg:w="43"/><text x="100.0111%" y="1135.50"></text></g><g><title>ttcaGetCol (4,158 samples, 1.50%)</title><rect x="98.2744%" y="1173" width="1.5026%" height="15" fill="rgb(222,106,8)" fg:x="271941" fg:w="4158"/><text x="98.5244%" y="1183.50"></text></g><g><title>ttcclr (1,746 samples, 0.63%)</title><rect x="99.1461%" y="1157" width="0.6310%" height="15" fill="rgb(211,220,0)" fg:x="274353" fg:w="1746"/><text x="99.3961%" y="1167.50"></text></g><g><title>ttcaGetCol@plt (31 samples, 0.01%)</title><rect x="99.7770%" y="1173" width="0.0112%" height="15" fill="rgb(229,52,16)" fg:x="276099" fg:w="31"/><text x="100.0270%" y="1183.50"></text></g><g><title>ttccfpg (31,805 samples, 11.49%)</title><rect x="88.3028%" y="1189" width="11.4937%" height="15" fill="rgb(212,155,18)" fg:x="244348" fg:w="31805"/><text x="88.5528%" y="1199.50">ttccfpg</text></g><g><title>ttcfSetIndRc (324 samples, 0.12%)</title><rect x="99.7965%" y="1189" width="0.1171%" height="15" fill="rgb(242,21,14)" fg:x="276153" fg:w="324"/><text x="100.0465%" y="1199.50"></text></g><g><title>ttcfSetIndRc@plt (41 samples, 0.01%)</title><rect x="99.9136%" y="1189" width="0.0148%" height="15" fill="rgb(222,19,48)" fg:x="276477" fg:w="41"/><text x="100.1636%" y="1199.50"></text></g><g><title>kpccc2u (33 samples, 0.01%)</title><rect x="99.9284%" y="1173" width="0.0119%" height="15" fill="rgb(232,45,27)" fg:x="276518" fg:w="33"/><text x="100.1784%" y="1183.50"></text></g><g><title>ttcfour (36,796 samples, 13.30%)</title><rect x="86.6556%" y="1205" width="13.2974%" height="15" fill="rgb(249,103,42)" fg:x="239790" fg:w="36796"/><text x="86.9056%" y="1215.50">ttcfour</text></g><g><title>ttcfour (68 samples, 0.02%)</title><rect x="99.9284%" y="1189" width="0.0246%" height="15" fill="rgb(246,81,33)" fg:x="276518" fg:w="68"/><text x="100.1784%" y="1199.50"></text></g><g><title>ttcaGetCol (32 samples, 0.01%)</title><rect x="99.9415%" y="1173" width="0.0116%" height="15" fill="rgb(252,33,42)" fg:x="276554" fg:w="32"/><text x="100.1915%" y="1183.50"></text></g><g><title>processor (276,612 samples, 99.96%)</title><rect x="0.0000%" y="1269" width="99.9624%" height="15" fill="rgb(209,212,41)" fg:x="0" fg:w="276612"/><text x="0.2500%" y="1279.50">processor</text></g><g><title>upirtrc (37,248 samples, 13.46%)</title><rect x="86.5017%" y="1253" width="13.4607%" height="15" fill="rgb(207,154,6)" fg:x="239364" fg:w="37248"/><text x="86.7517%" y="1263.50">upirtrc</text></g><g><title>nioqwa (37,203 samples, 13.44%)</title><rect x="86.5179%" y="1237" width="13.4445%" height="15" fill="rgb(223,64,47)" fg:x="239409" fg:w="37203"/><text x="86.7679%" y="1247.50">nioqwa</text></g><g><title>ttcdrv (37,196 samples, 13.44%)</title><rect x="86.5205%" y="1221" width="13.4419%" height="15" fill="rgb(211,161,38)" fg:x="239416" fg:w="37196"/><text x="86.7705%" y="1231.50">ttcdrv</text></g><g><title>all (276,716 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(219,138,40)" fg:x="0" fg:w="276716"/><text x="0.2500%" y="1295.50"></text></g><g><title>rust_oracle_per (59 samples, 0.02%)</title><rect x="99.9787%" y="1269" width="0.0213%" height="15" fill="rgb(241,228,46)" fg:x="276657" fg:w="59"/><text x="100.2287%" y="1279.50"></text></g></svg></svg>